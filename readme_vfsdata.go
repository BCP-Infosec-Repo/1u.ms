// Code generated by vfsgen; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Readme statically implements the virtual filesystem provided to vfsgen.
var Readme = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 12, 16, 15, 50, 4, 371147527, time.UTC),
		},
		"/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2020, 12, 16, 15, 50, 4, 527143211, time.UTC),
			uncompressedSize: 7707,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\xdb\x72\xdb\x38\xd2\xbe\xf7\x53\xf4\xaf\xfa\x2b\x13\xd7\x98\xa4\x25\xd9\x4e\xe2\xc8\x9a\x5f\xb1\x93\x8a\xea\x4f\x62\xcf\xd8\x99\x24\x7b\x07\x91\x4d\x12\x36\x08\x30\x38\xe8\xe0\xab\x7d\x88\x7d\xc2\x7d\x92\x2d\x1c\x48\x1d\x9d\xb5\x67\x66\x6b\x2f\x12\x49\x40\xa3\xd1\xdd\x68\x7c\xfd\xa1\x3d\xf8\x9f\x8b\xcb\xf3\x9b\x6f\x57\x6f\xa1\xd4\x15\x83\xab\xcf\x6f\x3e\x8c\xcf\xa1\x13\x25\xc9\x97\xfe\x79\x92\x5c\xdc\x5c\xc0\xd7\xf7\x37\x1f\x3f\x40\x37\x3e\x84\x1b\x49\xb8\xa2\x9a\x0a\x4e\x58\x92\xbc\xfd\xd4\x81\x4e\xa9\x75\x7d\x9a\x24\xb3\xd9\x2c\x9e\xf5\x63\x21\x8b\xe4\xe6\xb7\x64\x6e\x75\x75\xed\xe2\xf0\x35\xd2\x2b\x2b\xe3\x4c\x67\x9d\xe1\xde\xc0\x6d\x38\xaf\x18\x57\x67\x3b\xd4\x74\x5f\xbd\x7a\xe5\x57\x3b\x59\x24\xd9\x70\x0f\x60\x50\xa1\x26\x60\xa5\x23\xfc\x6e\xe8\xf4\xac\x73\x2e\xb8\x46\xae\xa3\x9b\x45\x8d\x1d\x48\xfd\xaf\xb3\x8e\xc6\xb9\x4e\xec\xea\xd7\x90\x96\x44\x2a\xd4\x67\x46\xe7\xd1\xcb\x0e\x24\x3f\xd6\x73\xad\x17\x0c\x77\x6a\x4b\x95\x5a\x5b\xcd\x49\x85\x67\x9d\x02\x39\x4a\xa2\x85\x5c\x11\xaf\x09\xcf\x44\xda\x08\x6b\xaa\x19\x0e\xbb\x26\xae\xd4\x20\xf1\x3f\xec\x30\xa3\xfc\x0e\x24\xb2\xb3\x8e\xb2\x5b\xaa\x12\x51\x77\xa0\x94\x98\xfb\x70\xa8\xd3\x24\x49\x33\x7e\xab\xe2\x94\x09\x93\xe5\x8c\x48\x8c\x53\x51\x25\xe4\x96\xcc\x13\x46\x27\x2a\x29\xa8\x2e\xcd\x24\xaa\x88\xbc\xcb\xc4\x8c\x47\xa9\x52\x49\x3f\x3e\x8c\xbb\x9b\x33\x71\x45\x79\xec\xec\xd7\x8b\x1a\xb7\xfd\x51\xa9\xa4\xb5\x06\x25\xd3\x47\xef\x5d\xd2\xa2\x64\xb4\x28\x75\x7c\xab\x92\x57\x71\xf7\x38\xee\x1e\xae\x0c\xda\x0d\x6f\x55\x07\x28\xd7\x58\x48\xaa\x17\x67\x1d\x55\x92\xde\xf1\x49\xd4\xbd\x37\x3f\xf7\xdf\xf0\x0f\xdf\x7e\x7f\xf5\x21\xa3\xdf\x5e\x1e\x9b\xaf\x1f\xef\x29\xed\x4f\x32\x79\x87\x6c\x51\xf7\x5f\xe0\xe1\xdf\x16\x37\xa3\x5f\xcb\xc3\xb3\x0e\xa4\x52\x28\x25\x24\x2d\x28\x3f\xeb\x10\x2e\xf8\xa2\x12\x46\x75\x86\x83\xc4\xdb\xfc\x97\x9a\xcf\x08\x2f\x0c\x29\x50\x25\xaa\x44\xc6\x7e\xe0\x04\x9f\x5d\x7e\xec\xcf\xdf\xa6\x27\xe7\xef\x72\x79\xf5\xe9\xe2\x53\xd7\xd4\x5f\x7f\x3e\x5e\xf0\xdb\x2f\xff\x3f\xfa\xaa\x8a\x9f\x27\x5f\x4e\xfa\xd7\xd7\xf7\x1a\x1f\xe7\xc4\x5f\x91\x0d\x3b\x5d\xf2\xda\x92\x0c\x73\x62\x98\x5e\xe6\xc1\xb6\x4b\xf7\xa9\xe1\xdf\xaf\x79\x97\xb1\x62\x74\x41\xc6\x57\xef\x16\xf7\xf2\xd7\x97\x9f\xaf\xc7\xb7\x5f\x7b\xbf\xd7\x66\xfe\xfe\xfe\xf3\xec\x1b\x55\x97\x33\xf1\xf2\x61\x97\x20\x19\xc2\xf2\x44\x86\x25\xbb\x55\x31\xe5\x54\xbf\x6f\x6c\xa3\xbc\xb8\xe4\x1f\x04\xc9\x9e\xef\xbf\x5e\x71\x3f\xf1\x17\x7c\x30\x11\xd9\x02\x52\x46\x94\x3a\xeb\xb4\x69\x6d\x07\x1d\x08\x74\x9b\x5b\x54\x76\xed\xcf\xde\xf0\x4b\x49\x34\x50\x05\xba\xa4\x76\xb4\x37\xdc\x1b\xd4\xc3\x9b\x92\x2a\x3b\x48\x40\x55\x84\x31\x50\xa8\x41\xe4\x70\x8f\x52\x44\xa9\xe0\x39\x2d\x8c\x24\x16\x8a\xe0\xe2\xd3\x35\x18\x4d\x19\xd5\x14\x15\xe4\x42\x02\x51\x8a\x2a\x6b\x24\x50\x0e\x19\x6a\x4c\x9d\x20\xe1\x19\xe0\xbc\x66\x82\x6a\xbf\x52\xe4\x70\x7d\xfd\xdb\xbb\x48\x22\x23\x1a\x33\x98\x1a\x66\x61\x60\x12\x74\xc5\x30\xd6\x50\x4b\x31\xa5\x19\x2a\x40\xa2\x16\xa0\x05\x18\x85\x6e\x4b\x89\x13\xca\x33\xbb\x89\xdf\x7c\x71\x00\x44\xc1\x0c\x19\xb3\x9f\x04\x66\xc4\x89\x17\xa8\x41\xa2\x12\x6c\x4a\x26\x0c\xdd\x57\x23\x53\xfb\x25\x15\x32\x53\x30\xa3\xba\x04\xc2\x17\x50\xd0\x29\xf2\x06\x7d\x54\x3c\x48\xea\x10\x07\x04\x2d\x04\x83\x4c\xa0\x02\x2e\x34\x60\x55\x33\xb1\x70\x6b\xb8\x98\x22\x03\x8d\x69\xc9\xe9\x77\x83\xca\xb9\x48\xbd\x98\x71\x43\x36\x02\x56\x52\x21\x57\x18\xc3\x88\x31\xc8\x91\x68\x23\xad\xb0\x44\xd0\x92\x4e\x29\x61\xd6\x52\x5a\xd5\x0c\x2b\xe4\xda\x69\x49\x09\x87\x09\x5a\xaf\x29\x5b\x40\x2e\x8c\xd5\xcc\x41\xe8\x12\x25\x28\x5a\x51\x46\xa4\x33\x6c\xdd\x54\x85\x72\x4a\x53\xb4\x46\xa4\x46\x4a\xe4\x9a\x2d\x40\x1a\x0e\x44\x83\x2e\x11\x06\xa9\xc8\x5a\x18\x75\xdf\x21\x13\x15\xa1\x1c\x9e\x3b\xdb\xb5\xfa\x09\x94\x99\xf8\x31\xb5\x1f\x74\x97\xbd\xe1\x67\x45\x0a\x0c\xd9\x51\x1e\x0d\x47\x91\x0f\xe0\x20\x29\x8f\xdc\xe6\xe3\x1c\x16\xc2\xc0\x8c\x70\xdd\x84\x9d\x84\x20\x83\xb6\x09\xe6\x0f\x01\x95\x9d\x25\x1c\xc6\x57\x07\xee\x28\xad\x51\xb9\x60\x4c\xcc\xec\x51\xb6\x5b\x9f\x36\x4e\x79\x83\x2b\x72\x87\xd1\x33\xa6\x5f\x8f\xaf\x9e\x15\xfa\x75\x24\x65\xbc\xea\x43\x23\xfc\x4e\x48\xc0\x39\xb1\x81\x3c\x68\xfc\x5a\x51\xd0\x8d\x7b\x71\x3f\x3e\xda\x5c\xbd\x66\x5a\x08\x90\x97\x0c\x02\x8d\x31\x12\x9b\x5b\xe5\x90\xad\x13\x8c\xfb\x5f\x28\x85\xd2\x10\x69\x18\xc1\xce\x7d\xf6\x76\x8e\x42\x69\xf3\x34\xcb\x24\x2a\x05\x61\x72\x6f\xe9\x90\x44\xe7\xd2\x37\x61\x5c\x2e\xd8\x58\x65\x44\x95\xa8\x80\x72\xa5\x91\x64\xf6\xfa\x64\x42\x2b\x9b\xee\x4c\xf0\xc2\x7e\xda\x68\x8e\xaf\xec\xe9\x4f\x09\xa3\xd9\x93\x0d\x8f\x7a\x51\x3f\xda\x32\x7c\x63\xf4\x69\x86\xd7\x8c\xa4\x08\x4a\x54\xd8\x5c\x89\x5a\x62\x4e\xe7\x89\x32\x79\x4e\xe7\x30\xc1\x5c\x48\x5c\x39\xa6\xe6\x54\x2c\x90\xe4\x1a\x65\x98\x92\xb2\x99\x78\xee\xbd\x96\x08\xc4\xe6\x0d\x66\xfb\x4f\xf0\x93\xc4\x7e\xfb\x68\xc3\xb5\x88\xf0\x2c\x26\x91\x37\x2a\x78\xff\x04\xd9\xc7\xc5\xe4\xa3\x61\x9a\xd6\x6c\x89\x3e\xe1\x96\x2b\xac\x89\x74\x10\x38\x59\x04\x77\xed\x1e\xd1\x1f\xcd\xbf\x60\xa9\x55\x71\x1c\x9d\x44\x2f\xa2\x97\x0f\x1c\xe9\x2e\x89\x9d\xae\x3c\x6d\xd5\x71\x7c\x12\xbf\x88\x5f\x6e\x06\xa0\x3c\x1a\xae\x21\xf7\x12\x3c\xb8\xcb\x5c\x07\xbe\x73\xdd\xd4\x05\x98\x98\x42\x1d\x6c\x80\xbd\x2b\x49\x16\xe5\xa3\x3b\x2e\x66\x7c\x09\xbe\xa0\x89\x2c\xd0\x55\x9d\x9b\xcb\xf3\x9b\xcb\xcf\x8e\xa5\x59\x5d\x1b\x65\x05\x32\x23\xad\xd4\xf8\x0a\x26\x8c\xa4\x77\x2c\xd4\x2a\x21\x61\x56\x52\x8d\xe1\xb7\xab\x3e\x54\x41\x8d\x32\x17\xb2\xc2\x0c\x8c\xb2\x62\xa4\x01\x96\x75\x54\xb3\x38\x0f\x0c\x0b\xaa\xad\xe2\xb0\x85\x03\x37\x2a\x95\x95\xb3\xf5\x41\xc3\xf3\xb4\xc4\xf4\x6e\xdf\x41\xbc\x16\x01\xfd\xe4\x84\x66\x19\x72\x10\x1c\x57\x57\x2a\x4c\x05\xcf\x96\x4b\x8d\xc2\xfd\x25\xd8\x5b\x8c\x75\xa4\x19\x97\x26\x59\x32\xed\x2b\x9a\xad\xe5\x30\xc1\x92\x4c\xa9\x90\x3b\x91\x76\xc1\x35\x99\x3f\x0c\xb3\x5d\x8f\xb3\x2e\xee\x61\xa8\xf7\x68\xe8\xb5\x5b\xad\x9a\xb4\x0b\x83\xbd\xe6\xee\xc9\xab\xb8\x77\x7c\xd4\x7e\x6e\x42\xf3\x8c\xda\x8a\x19\x42\xe8\x42\xfd\x10\x48\xfb\x90\x96\xc8\x57\x04\xbc\xd2\x38\x7c\xfe\x59\x34\xff\xb1\xc5\x7b\x4f\x11\xde\x79\xc7\xfe\x0b\x3b\xaf\x07\x68\x1b\xb0\x2c\xa5\x60\xa2\xa0\xa9\xcd\x25\xea\x03\xdc\x10\x18\x77\x15\x55\x48\x29\x15\xa2\x6a\x58\x13\x54\xca\x53\xe9\xe8\x0c\x71\x6f\x4f\x46\x87\x34\xb7\xcb\x25\xc2\xcc\xfe\xc7\x45\x93\xd9\xca\xdf\x04\xaa\x9a\x9c\x09\x77\x80\x11\xa5\xe1\x38\x5c\x03\x75\x00\x54\xff\xa4\x9a\x2c\x58\xde\x1e\x97\x1b\xe3\xab\xd7\x83\x84\x51\xbf\x8f\xe3\x48\x33\xaa\xf0\x81\x25\xe1\x5e\x09\x8e\x71\x58\x94\x18\xb6\x55\x6c\x3d\xf4\xa3\xda\x2e\x50\xd1\x6a\xc6\x85\x2a\xb6\x5a\xa9\xa2\x65\xa9\xb2\x8c\x4d\x66\x28\x1d\x71\xb5\x30\x45\x18\xbd\xc7\xad\xfb\xf1\x1c\xe3\x22\x0e\xab\xd7\x4a\xce\xbf\x3b\xd3\xb5\x1a\x14\x36\xdd\x8f\xc1\x91\x56\x5a\xa1\x30\xa1\x50\x36\x05\xc6\xd1\x73\x24\x69\xb9\xba\x7d\x8b\x29\x81\xc3\x71\xf4\xb1\x4a\x4b\xc2\x8b\x60\xac\x7f\xf9\x2c\x4f\xa3\x51\xff\x67\xa1\x25\x17\xd2\x0e\xda\x87\x94\x9c\x12\xe6\x66\x1e\x81\x36\x33\x97\x47\x5e\xf3\xe6\xfa\x36\xf6\xca\xb1\x0e\x5d\xba\x5c\xa2\x77\x2d\xf9\x3d\x6c\xd1\xe5\x79\xf7\xb0\x71\x68\xdf\xe2\xbf\x17\x38\xae\xda\xf9\x63\xa8\x28\x37\x1a\xd5\xfe\xee\x20\xd9\x12\xd0\x69\xab\x06\x66\x1d\x0b\xfe\xcf\x67\x25\x4d\x4b\xbb\xff\xf8\xaa\xeb\x52\xc0\xb4\xd8\xa8\xf6\x6d\xbd\x97\xa8\x8d\xe4\x98\x41\xd5\x10\x02\x1b\xce\x36\xd5\xda\x6a\xf7\x1f\x88\xae\x4b\xd4\x9e\xdb\xee\xc9\xb0\xfe\x20\x8c\xe7\x42\xf6\x0f\xd5\xaa\xea\x6e\xef\x45\x7c\x18\x1f\xc6\xdd\xdd\x88\xde\x60\x79\xcb\xcf\x37\xb0\xdc\xdf\x6a\x3d\x13\x3e\x30\x07\x4b\x70\x7f\x60\x79\xb3\x5d\xab\x40\x48\xe0\x96\x4b\xf4\xdb\x13\x6e\xde\x32\x47\xc3\xd1\x68\xb4\xf5\x7e\xb9\x11\x0e\x73\xc1\xd4\x0f\x55\x78\xc1\xd9\xa2\x7d\xbc\x4c\x4f\x1a\x10\x7d\xda\x19\xd1\x3a\x9a\x9e\x3c\xe2\x25\x73\x2e\x98\xe0\x0a\x2a\xa3\xb4\x4f\x18\x47\xa3\x33\x5f\xdc\x19\xea\x25\xda\xa4\x61\x65\x0c\x23\x05\x84\xcd\xc8\x42\x1d\x80\x24\x3c\x13\x55\xc0\xb0\x55\x9c\x0a\x84\xd3\x28\x7c\xc2\xe3\x60\x34\x1a\xc1\x2a\x2c\x79\x27\xba\x69\x2f\x4d\xfb\x9b\x20\xb4\xf7\x58\x41\x57\x88\x56\x03\x09\xdd\xd3\xde\xe9\x69\x7f\x07\x69\x3c\xff\x34\xfa\xf8\x56\xb5\x47\xf5\x66\xd1\xe0\xd1\x01\x18\x5e\x13\xa9\xdc\xd3\x3e\xa8\x09\x0f\xeb\x54\x70\x45\x33\x94\x98\xd9\x22\xe5\x35\x3c\xce\x63\x67\x79\xc8\xf9\x38\x15\xd5\x46\x9d\xdd\x35\xe3\x4a\x21\x07\xc2\x28\xf1\x1d\x90\x15\xa1\x78\x2f\x8e\xe3\x1d\x95\x55\x58\xc1\x74\x85\xbc\x69\x61\x4f\x86\x78\x5b\x0f\xac\x3b\xcd\x09\x5b\x90\x6e\x8b\x8e\x8f\xef\x53\x49\x8c\xd7\xf1\xb0\x57\x0f\xcf\xff\x01\xdf\x3e\x09\x8d\xfe\xf2\xf8\xb8\xbb\xac\x15\x46\x43\xfb\x70\x5b\x3f\x9d\x65\xc3\xc1\xe7\xb7\xe1\x4d\x47\xc8\x7b\xa3\xcc\x24\x56\x65\x7c\x8b\x9b\x2d\x0b\xa5\x4d\x4d\xb3\x65\xe7\xc4\xb7\x95\x32\xd4\x84\xb2\xfd\x03\x68\x71\xb8\x96\x62\x42\x26\x6c\xe1\x1a\x33\x33\x6b\x58\xd3\xab\x78\x6a\x1c\x99\x48\x09\xb3\x63\x1b\xf1\xdb\x1e\xdf\x8a\x5b\x2b\x12\xb7\xfe\x6c\xc5\xae\x3c\x1a\x5e\xba\x0e\x4f\xd3\x39\x59\xd4\xa8\x56\x7b\x2c\x16\x67\x7c\x45\x9b\xa0\x9e\x21\xf2\x87\x78\xc9\x36\x15\xb1\x0f\xa7\xf6\xb2\x78\xfd\x96\x20\xd9\x89\xb6\x1e\xb9\xee\x1d\x5f\xb4\x4f\xa7\xc0\xd0\xe2\xc7\x46\xe9\xe6\xeb\x8d\x8f\xd3\x84\x91\xd2\xfe\xdb\x08\xd3\xd6\x30\x64\xe8\xdb\x97\xd4\x32\x7b\x0b\xd8\xcf\xbe\x1b\xa1\x5f\x37\x82\xfe\xd7\x8e\x30\xbd\xc7\x39\x20\x4f\xc5\xda\x3b\xb2\xe1\x6f\x6e\x02\x97\x6f\x4a\xae\x95\xf5\xa6\x6d\x48\x51\x0e\x25\x7a\x5c\xb4\xd7\x8c\x84\x68\x95\x38\xdf\xb8\x66\x6b\xbc\x6e\x35\xc6\x4f\xcd\x1b\xab\xba\xdf\xed\x61\xbf\xd7\xc3\x7e\xbf\x87\xfd\x4d\xfa\xfe\x03\x81\xc7\xf4\x16\xca\xa3\xe1\x07\x51\xc0\x94\xe2\x6c\x35\x20\x81\xbf\x3b\xe7\x19\x0b\x4f\xe9\x40\xba\xed\xbd\x30\x13\x46\x53\xc7\x17\x25\xfa\x7e\xe4\x5a\x1d\x43\x9e\xd5\x82\x72\xfd\x18\x76\x3f\x20\x2b\x8d\xf6\xd3\x24\x71\xa6\x27\x96\xc3\x77\x86\x5b\x43\x83\x84\x0c\xe1\x9f\x7f\xff\x87\xeb\xba\x2a\xcf\xf4\xbb\x87\x87\xad\x71\x4b\x32\xbf\xbe\x54\x14\x6e\x15\xe1\x40\x79\x4e\x39\xd5\xd6\x3d\xe2\x1a\x03\x35\x29\xc2\xdb\x37\x34\x3e\x9d\xe3\xa1\xd1\x72\xb0\x4a\x00\x2d\x3a\x40\x94\xb7\x75\x73\x6c\x33\x24\x73\x0f\x7c\xab\xc3\xde\x07\xc3\xb9\xd5\x19\xf0\xd7\x48\x06\x9b\x76\xac\x30\x7c\x02\x1a\x65\x45\x39\x61\x16\x71\x98\xa5\xf6\x76\xf1\xc2\xd3\xbe\x1a\x25\xad\x42\x4b\xf9\x21\xa7\x7e\x29\x24\xd6\x67\x03\x89\x05\xce\x6b\x1f\x18\x65\xdf\x05\xf6\xdc\x27\x62\x8a\x07\x30\x31\x1a\x54\x29\x66\x9e\x85\x54\x44\xa7\x81\xd6\x72\x54\x6b\x8f\x98\xb2\x37\x3c\x17\x5c\x93\x54\x2b\x78\x46\xaa\xfa\x35\xbc\x1b\xfd\xda\x76\xf5\x03\x79\x2d\xc9\x14\xdd\x3d\x77\xd1\xa6\x96\x69\x08\x09\xca\x14\x45\xf3\x93\x72\xcb\x7c\xb3\x03\xc8\x11\x19\xe4\x12\xdd\xbb\x3b\xf5\x9a\xa1\x42\x98\x52\x02\x6b\x47\xae\x4e\x93\x44\xc7\x15\x26\x1c\x71\x8e\x15\x65\x9d\xe1\xff\x35\x5f\xdd\x71\x0b\x0e\x37\xc8\xb0\x90\xa4\x5a\x52\xb1\xb1\xff\xb3\x83\x6f\xb1\xbb\x6d\x36\x21\xc8\x1d\xca\x2f\x6d\x46\x5f\x1b\x89\xcb\xe5\x6f\x4c\xc0\x73\x9a\xc3\xd8\x11\x31\xaa\x9b\xe7\xa3\x6b\x39\x52\xc6\xb0\x20\x0c\x48\x36\x45\xee\x5e\xad\x42\xc2\xc5\x85\xb8\xb6\x82\xbe\xf7\x0f\xa5\x29\x10\x48\x25\x0c\x77\xad\x27\x2d\x49\x9e\xd3\xf4\x97\xd5\x4b\xa4\xfc\xed\x20\xb3\xdc\x30\xa0\x19\x12\x15\x8a\xcb\x18\x32\xc1\x7f\xd2\x2e\xbd\x82\x59\xc9\x44\x64\x8b\xe1\xc0\xfd\xdd\x74\xb8\xf7\xaf\x00\x00\x00\xff\xff\xc1\x75\x8b\xe3\x1b\x1e\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/index.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
