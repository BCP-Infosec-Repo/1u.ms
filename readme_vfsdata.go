// Code generated by vfsgen; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Readme statically implements the virtual filesystem provided to vfsgen.
var Readme = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2021, 2, 28, 9, 39, 46, 887092579, time.UTC),
		},
		"/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2021, 2, 28, 9, 39, 47, 47093986, time.UTC),
			uncompressedSize: 8779,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xc4\x5a\xdd\x72\xdb\xc8\x72\xbe\xd7\x53\x74\x58\xa9\xb5\x55\x2b\x02\x22\x69\x69\x6d\x59\xe2\x1e\xad\xb4\x8e\x59\x91\x6d\xed\x8a\x3e\xb6\x73\x93\x1a\x02\x0d\x60\xa4\xc1\x0c\x3c\x3f\xa4\xa0\xab\x3c\x44\x9e\x30\x4f\x92\xea\x19\x00\xfc\x95\x23\x9d\x73\x52\xe7\x62\x57\xc4\xa0\xa7\xa7\xbb\xa7\xfb\xeb\x1f\xf8\xf4\x5f\x2e\x3f\x5d\x4c\xbf\x5d\xff\x0e\x85\x2d\x05\x5c\x7f\xfe\xed\x6a\x72\x01\xbd\x7e\x1c\x7f\x19\x5d\xc4\xf1\xe5\xf4\x12\xbe\xbe\x9f\x7e\xb8\x82\x41\x74\x08\x53\xcd\xa4\xe1\x96\x2b\xc9\x44\x1c\xff\xfe\xb1\x07\xbd\xc2\xda\xea\x24\x8e\x17\x8b\x45\xb4\x18\x45\x4a\xe7\xf1\xf4\xcf\xf8\x9e\x78\x0d\x68\x73\xf3\xb3\x6f\x57\x76\x46\xa9\x4d\x7b\xe3\xbd\x53\x7f\xe0\x7d\x29\xa4\x39\xdb\xc1\x66\xf0\xe6\xcd\x9b\xb0\xdb\xd3\x22\x4b\xc7\x7b\x00\xa7\x25\x5a\x06\x44\xdd\xc7\xef\x8e\xcf\xcf\x7a\x17\x4a\x5a\x94\xb6\x3f\xad\x2b\xec\x41\x12\x9e\xce\x7a\x16\xef\x6d\x4c\xbb\xdf\x42\x52\x30\x6d\xd0\x9e\x39\x9b\xf5\x5f\xf7\x20\xfe\x31\x9f\x1b\x5b\x0b\xdc\xc9\x2d\x31\x66\x6d\xb7\x64\x25\x9e\xf5\x72\x94\xa8\x99\x55\x7a\x85\xbc\x62\x32\x55\x49\x4b\x6c\xb9\x15\x38\x1e\xb8\xa8\x34\xa7\x71\x78\xa0\x65\xc1\xe5\x1d\x68\x14\x67\x3d\x43\x47\x9a\x02\xd1\xf6\xa0\xd0\x98\x05\x73\x98\x93\x38\x4e\x52\x79\x6b\xa2\x44\x28\x97\x66\x82\x69\x8c\x12\x55\xc6\xec\x96\xdd\xc7\x82\xcf\x4c\x9c\x73\x5b\xb8\x59\xbf\x64\xfa\x2e\x55\x0b\xd9\x4f\x8c\x89\x47\xd1\x61\x34\xd8\x7c\x13\x95\x5c\x46\x5e\x7e\x5b\x57\xb8\xad\x8f\x49\x34\xaf\x2c\x18\x9d\x3c\xf9\xec\x82\xe7\x85\xe0\x79\x61\xa3\x5b\x13\xbf\x89\x06\x47\xd1\xe0\x70\x65\x91\x0e\xbc\x35\x3d\xe0\xd2\x62\xae\xb9\xad\xcf\x7a\xa6\x60\xc3\xa3\xe3\xfe\xe0\xc1\xfd\x3c\xfa\x4d\x5e\x7d\xfb\xeb\x9b\xab\x94\x7f\x7b\x7d\xe4\xbe\x7e\x78\xe0\x7c\x34\x4b\xf5\x1d\x8a\xba\x1a\xfd\x82\x87\xff\x51\x4f\xcf\xff\x28\x0e\xcf\x7a\x90\x68\x65\x8c\xd2\x3c\xe7\xf2\xac\xc7\xa4\x92\x75\xa9\x9c\xe9\x8d\x4f\xe3\x20\xf3\x3f\x54\x7c\xc1\x64\xee\x58\x8e\x26\x36\x05\x0a\xf1\x03\x25\xe4\xe2\xd3\x87\xd1\xfd\xef\xc9\xf1\xc5\xbb\x4c\x5f\x7f\xbc\xfc\x38\x70\xd5\xd7\x9f\x8f\x6a\x79\xfb\xe5\xdf\xcf\xbf\x9a\xfc\xe7\xd9\x97\xe3\xd1\xcd\xcd\x83\xc5\xa7\x29\xf1\x8f\xf0\x86\x9d\x2a\x05\x6e\x71\x8a\x19\x73\xc2\x2e\xfd\x60\x5b\xa5\x87\xc4\xc9\xef\x37\x72\x20\x44\x7e\x7e\xc9\x26\xd7\xef\xea\x07\xfd\xc7\xeb\xcf\x37\x93\xdb\xaf\xc3\xbf\x56\xee\xfe\xfd\xc3\xe7\xc5\x37\x6e\x3e\x2d\xd4\xeb\xc7\x55\x5a\xf3\xa7\x71\x21\x6e\x4d\xc4\x25\xb7\xef\x5b\xd1\xb8\xcc\x3f\xc9\x2b\xc5\xd2\x97\xfb\x6f\x57\xb4\x8f\x43\x7c\x9f\xce\x54\x5a\x43\x22\x98\x31\x67\xbd\xce\xab\x69\xd1\x63\xc0\xa0\x0d\xa2\x62\x40\x8f\xc3\xf1\x97\x82\x59\xe0\x06\x6c\xc1\x69\x75\x38\xde\x3b\xad\xc6\xd3\x82\x1b\x5a\x64\x60\x4a\x26\x04\x18\xb4\xa0\x32\x78\x40\xad\xfa\x89\x92\x19\xcf\x9d\x66\x84\x44\x70\xf9\xf1\x06\x9c\xe5\x82\x5b\x8e\x06\x32\xa5\x81\x19\xc3\x0d\x09\x09\x5c\x42\x8a\x16\x13\x4f\xc8\x64\x0a\x78\x5f\x09\xc5\x6d\xd8\xa9\x32\xb8\xb9\xf9\xf3\x5d\x5f\xa3\x60\x16\x53\x98\x3b\x41\x28\x30\x6b\x78\x45\x30\xb1\x50\x69\x35\xe7\x29\x1a\x40\x66\x6a\xb0\x0a\x9c\x41\x7f\xa4\xc6\x19\x97\x29\x1d\x12\x0e\xaf\x0f\x80\x19\x58\xa0\x10\xf4\x97\xc1\x82\x79\xf2\x1c\x2d\x68\x34\x4a\xcc\xd9\x4c\xa0\xff\xe9\x74\x42\x3f\x12\xa5\x53\x03\x0b\x6e\x0b\x60\xb2\x86\x9c\xcf\x51\xb6\xe0\x63\xa2\xd3\xb8\x6a\xec\x80\x60\x95\x12\x90\x2a\x34\x20\x95\x05\x2c\x2b\xa1\x6a\xbf\x47\xaa\x39\x0a\xb0\x98\x14\x92\x7f\x77\x68\xbc\x8a\x3c\x90\x39\xbf\x44\x16\x20\x4a\x83\xd2\x60\x04\xe7\x42\x40\x86\xcc\x3a\x4d\xc4\x1a\xc1\x6a\x3e\xe7\x4c\x90\xa4\xbc\xac\x04\x96\x28\xad\xe7\x92\x30\x09\x33\x24\xad\xb9\xa8\x21\x53\x8e\x38\x4b\x50\xb6\x40\x0d\x86\x97\x5c\x30\xed\x05\x5b\x17\xd5\xa0\x9e\xf3\x04\x49\x88\xc4\x69\x8d\xd2\x8a\x1a\xb4\x93\xc0\x2c\xd8\x02\xe1\x94\x6d\x44\x83\xf7\x85\xb8\xd7\xfa\x04\x1b\x43\xaa\x4a\xc6\x25\xbc\xf4\xba\x58\xf3\x02\x8c\x9b\x85\x35\xb3\xdf\x9c\x55\xbc\x1a\xdf\x04\x33\x26\x2a\x45\xf8\x89\x95\xd5\x5b\x30\x28\xb2\x7e\xa1\x8c\x3d\x8d\x8b\x57\x4b\x81\x02\x1d\x79\xd2\x9c\x71\xe1\x2f\x41\xc9\x6d\x39\x02\xd4\xfa\x58\x94\x88\xf7\x41\xae\xde\x38\x2c\x93\x5c\x11\xbc\x57\x0b\x9c\xa3\x3e\xf0\x8a\xf8\x83\xb9\x01\x53\x70\x6b\x6b\xba\x72\x8f\x35\xad\x2d\x26\x19\xd4\xca\xc1\x82\x49\x4b\xb6\xed\x64\x03\x6e\x0f\x20\x53\x42\xa8\x85\xf7\x77\x30\x16\x2b\x73\x12\xb6\x29\xd1\x46\x0d\x97\x89\xf6\x77\xc1\x7c\xde\x14\x7c\xfc\x6f\x68\x81\xb5\xb6\xa1\x9c\x45\xde\x5b\x2b\xa7\x21\x29\x14\x59\x9c\xcc\x55\x39\x0b\xde\x35\x83\x6f\x59\x15\x28\x26\xd7\xd1\x69\x2c\x78\x60\x74\x8d\x3a\x53\xba\x84\x53\xd2\x60\x9c\x07\x0f\xdd\xa9\xfd\x69\xec\x49\x56\xf6\x5e\xaa\x85\x14\x8a\xa5\xfe\xb0\x52\xa5\x3c\xab\x9f\x68\xc9\x78\x26\xd4\x2c\x2e\x99\xb1\xa8\xc3\x4a\x54\x33\x2a\x0a\x96\xbf\xbd\x91\x97\x67\xfd\xe9\x24\x08\x7e\x87\xde\x4c\x27\x8d\xb8\x9e\x1a\x56\xf7\xac\x89\x18\x2b\x11\x20\xe5\xb3\x61\x39\x36\x58\x52\xbc\x1a\x9f\xf7\x83\x49\x3a\xcf\xd8\xb8\x9e\xdc\x1b\x37\xd0\x80\x25\x38\x0a\x21\x8b\xde\x86\x4c\xc2\xe4\xfa\xc0\x07\x3e\xdd\x7c\xb8\x3d\x0a\xfc\xce\x31\x4f\xda\x6b\x0f\x52\x96\xec\x0e\xfb\x3f\x09\xfb\x76\x72\xfd\x53\x6e\xdf\xf6\xb5\x8e\x56\x0d\xda\x12\xbf\x53\x1a\xf0\x9e\x51\xd8\x1d\xb4\x37\xbb\xc2\x60\x10\x0d\xa3\x51\xf4\x6a\x73\xf7\x9a\x68\x8d\x55\x02\x65\x43\xd0\x0a\xa3\xb1\xf5\x26\x9f\x06\x7b\x8d\x70\xff\x0a\xde\x0f\xfb\x16\xce\x61\xe7\x39\x7b\x3b\x57\xa1\x20\x54\x4b\x53\x8d\xc6\x40\xf3\x72\x6f\xa9\x90\x46\xaf\xd2\x37\xe5\x3c\x72\x90\xad\x52\x66\x0a\x34\xc0\xa5\xb1\xc8\x52\x72\xd7\x54\x59\x43\x91\x22\x94\xcc\xe9\x2f\x59\x73\x72\x4d\x51\x34\x67\x82\xa7\xcf\x16\xbc\x3f\xec\x8f\xfa\x5b\x82\x6f\xac\x3e\x4f\xf0\x4a\xb0\x84\x40\xa3\xc4\x16\x40\x2b\x8d\x19\xbf\x8f\x8d\xcb\x32\x7e\x0f\x33\xcc\x94\xc6\x95\x6b\x6a\x6f\x85\xd2\x4e\x66\x51\x37\xaf\xb4\x6e\x5f\xbc\x0c\x5a\x6b\x04\x46\x7e\x83\xe9\xfe\x33\xf4\x64\x51\x38\xbe\xbf\xa1\x5a\x9f\xc9\x34\x62\xfd\x20\x54\xa3\xfd\x33\x68\x9f\x66\x93\x0f\x4e\x58\x5e\x89\x65\xae\x6a\x72\x82\xc1\x8a\x69\x9f\x30\x67\x75\xa3\x2e\x9d\xd1\xff\x5b\xfd\xaf\x91\x94\x58\x1c\xf5\x8f\xfb\xbf\xf4\x5f\x3f\x72\xa5\xbb\x28\x76\xaa\xf2\xbc\x5d\x47\xd1\x71\xf4\x4b\xf4\x7a\xd3\x00\xc5\xab\xf1\x5a\x9e\x5f\x82\x87\x6c\x32\x80\xa4\x02\xbc\xad\x22\x60\xe6\x72\x73\xb0\x51\x1a\xf8\x02\x86\x6a\x82\xfe\x9d\x54\x0b\xb9\x4c\xd5\x60\x99\xce\xd1\xd7\x28\xd3\x4f\x17\xd3\x4f\x9f\x7d\x49\x4f\xbc\x36\x8a\x10\x48\x9d\x26\xaa\xc9\x35\xcc\x04\x4b\xee\x44\x53\xd9\x28\x0d\x8b\x82\x5b\x6c\x9e\x7d\xad\xc2\x0d\x54\x01\xdd\x31\x05\x67\x88\xac\x4b\x19\xeb\xa8\x46\x55\x01\x08\xcc\xb9\x25\xc6\xcd\x11\x1e\xdc\xb8\x36\x44\x47\xd5\x84\x85\x97\x49\x81\xc9\xdd\xbe\x87\x7b\xab\x1a\xf4\xd3\x33\x9e\xa6\x28\x41\x49\x5c\xdd\x69\x30\x51\x32\x5d\x6e\x75\x06\xf7\x97\xa5\x01\x61\xac\xef\xb0\x70\x23\x8b\xf9\xfa\xc7\x67\xc2\x19\x16\x6c\xce\x95\xde\x89\xb4\xb5\xb4\xec\xfe\x71\x98\x1d\x04\x9c\xf5\x76\x6f\x96\x86\x4f\x86\x5e\x3a\x6a\x55\xa4\x5d\x18\x1c\x38\x0f\x8e\xdf\x44\xc3\xa3\x57\xdd\xdf\x4d\x68\x5e\x70\xaa\xaf\x1a\x13\x7a\x53\x3f\x06\xd2\xc1\xa4\x05\xca\x15\x82\xc0\x34\x6a\xfe\xfe\xbd\x68\xfe\x63\x89\xf7\x9e\x43\xbc\x33\xc6\xfe\x09\x27\xaf\x1b\x68\x1b\xb0\xa8\xde\x13\x2a\xe7\x09\xf9\x12\x0f\x06\x6e\xcb\x5d\x1f\x8a\xa6\x71\xa9\xb6\xe0\x72\x3f\x28\xb8\x78\x46\xdb\x35\xc2\x82\xfe\x27\x55\xeb\xd9\x26\x44\x02\x37\xad\xcf\x34\x31\x20\x98\xb1\x70\xd4\x84\x81\x39\x00\x6e\x5f\x98\xd6\x0b\x96\xd1\xe3\x7d\x63\x72\xfd\x76\x59\xe7\xf8\x8a\x7a\xc1\x0d\x3e\xb2\xa5\x89\x2b\x25\xb1\xab\x72\x9c\xd8\x4a\xb6\x01\xfa\xd1\x6c\x27\xa8\xfe\xaa\xc7\x35\x59\x6c\x35\x53\xf5\x97\xa9\x8a\xea\x7b\x9d\xa2\xf6\x6d\x0e\xc1\x14\x13\xfc\x01\xb7\xe2\xe3\x25\x46\x79\xd4\xec\x5e\x4b\x39\xff\xd7\x9d\xae\xe5\xa0\xe6\xd0\xfd\x08\x7c\x8b\xc3\x4b\x54\xae\x49\x94\x6d\x82\xf1\xcd\x1c\xb2\xa4\x58\x3d\x7e\xb3\xc4\x96\x18\x6c\x95\x14\x4c\xe6\x8d\xb0\xa1\x4d\x5e\xde\x46\xcb\xfe\xef\x85\x96\x4c\x69\x5a\xa4\xae\x5b\xcf\x99\xf0\x6f\x9e\x80\x36\x0b\xef\x47\x81\xf3\xe6\xfe\xce\xf6\xc6\x57\x1d\xb6\xf0\xbe\x44\x75\x6f\x83\x0a\x87\x1d\xba\xbc\x1c\x1c\xb6\x0a\xed\x13\xfe\x07\x82\xa3\xb2\x7b\x7f\x04\x25\x97\xce\xa2\xd9\xdf\x6d\x24\x4a\x01\xbd\x2e\x6b\x60\xda\x23\xf0\x7f\xb9\x28\x78\x52\xd0\xf9\x93\xeb\x81\x77\x01\xd7\x61\xa3\xd9\xa7\x7c\xaf\xd1\x3a\x2d\x31\x85\xb2\x2d\x08\xc8\x9c\x9d\xab\x75\xd9\xee\xff\xc1\xba\xde\x51\x69\x51\xba\x92\x9e\xfd\xc1\xcf\x06\xf8\x47\x01\x3d\x53\x7a\x74\x68\xfc\x21\xc3\xc0\x7a\x30\xfc\x25\x3a\x8c\x0e\xa3\xc1\x6e\x6c\x6f\x51\xbd\xab\xd4\x37\x50\x3d\xc4\xb7\x5d\xa8\x60\xa2\x83\x25\xcc\x3f\xb2\xbd\x3d\xae\x63\xa0\x34\x48\xaa\x2a\x46\xdd\x5d\x2f\x7b\xde\xf3\xf3\xf3\xad\x4e\x66\xaa\x3c\xfa\x82\xab\x1e\xcb\xf5\x4a\x8a\xba\x6b\x63\xe6\xc7\x2d\x9c\x3e\xef\xb6\x78\xd5\x9f\x1f\x3f\xa1\xa7\xb9\x50\x42\x49\x03\xa5\x33\x36\xb8\x8e\x2f\xa8\xd3\x90\xe6\x05\xda\x25\xee\x24\x6d\xef\x06\xe7\x06\x98\x58\xb0\xda\x1c\x80\x66\x32\x55\x65\x83\x66\xab\x88\xd5\x94\x9e\xce\xe0\x33\xda\x84\xf3\xf3\x73\x58\x05\xa8\xa0\xc4\x20\x19\x26\xc9\x68\x13\x8e\xf6\x9e\x4a\xe8\x53\xd2\xaa\x21\x61\x70\x32\x3c\x39\x19\xed\x28\x1f\x2f\x3e\x9e\x7f\xf8\xdd\x74\x57\xf5\x5b\xdd\x22\xd3\x01\x38\x59\x31\x6d\xfc\x34\xa2\x61\xd3\x0c\x64\x12\x25\x0d\x4f\x51\x63\x4a\xe9\x2a\x70\x78\x9a\xc6\x5e\xf2\xc6\xe7\xa9\xfb\xde\xc8\xb8\xbb\xde\xf8\xa4\x28\x81\x09\xce\xc2\xe4\x6c\x85\x28\xda\x8b\xa2\x68\x47\x8e\x55\x44\x98\xac\x94\x71\x56\xd1\xcd\xb0\x20\xeb\x01\xa9\xd3\xde\x30\xc1\x75\x97\x7e\x82\x7d\x9f\x5b\xce\x04\x1e\x8f\x6b\xf5\xf8\xfb\xbf\x41\xb7\x8f\xca\x62\x08\x9e\x60\x77\xef\xb5\xca\x59\xe8\x5a\xb8\xf5\xdb\x59\x0e\xa6\x82\x7f\x3b\xd9\x4e\x12\x83\x36\xc6\xcd\x22\x53\x44\xb7\x5d\x93\xd8\x8e\xb6\x8c\x75\x15\x4f\x97\x13\xb7\x30\x8e\x4c\xd1\x32\x2e\xf6\x0f\xa0\x43\xe4\x4a\xab\x19\x9b\x89\xda\x0f\xf4\x16\x24\x58\x3b\xb5\x78\xae\x1d\x85\x4a\x98\xa0\xb5\x0d\xfb\x6d\xaf\x6f\xd9\xad\x23\x89\x3a\x7d\xa2\x1d\xce\xfe\xc9\x4f\x06\xdb\x19\x4a\x5d\xa1\x59\x9d\xb6\x10\xce\x84\xdc\x36\x43\xbb\x40\x94\x8f\x55\x28\xdb\x45\x09\xb5\x50\x5d\xb0\x04\xfe\x54\x2a\xd1\x8b\x2e\x33\xf9\xa9\xaf\xac\xbb\x26\xaa\xa9\xd5\xa2\xa7\x5a\x69\xfa\x75\x1a\xec\x34\x13\xac\xa0\xff\x36\xcc\xb4\xb5\x0c\x29\x86\xb1\x37\xa7\x1a\x9f\x00\xfb\xa7\xef\x4e\xd9\xb7\x2d\x61\x78\xda\x61\xa6\xf7\x78\x0f\x28\x13\xb5\xd6\x51\xb6\x95\x9c\x7f\x81\xcb\xee\x52\x5a\x43\xda\x74\xa3\x29\x2e\xa1\xc0\x80\x8b\x14\x66\xac\xb1\x56\x81\xf7\x1b\x61\xb6\x56\xe1\xad\xda\xf8\xb9\x7e\x43\xac\x47\x83\x21\x8e\x86\x43\x1c\x8d\x86\x38\xda\x2c\xe4\x7f\x40\xf0\x94\x29\x43\xf1\x2a\x44\x5d\x33\xc7\x9f\x4e\xaf\x96\x6e\x73\xa3\xca\x30\x50\x46\x6d\xfc\xf8\x5b\xbe\xb0\xdd\xc8\xae\x60\x32\x15\xe8\xbf\x07\xd0\x2e\x9f\x69\xfc\xcc\xfe\xb2\x29\xfe\x68\x91\x1b\x18\x78\xdf\xe8\x35\x73\xe9\x1e\xb4\x01\x4b\x36\x3c\xf4\xef\x7c\x01\x6e\x1e\x9b\xdc\x36\x65\xe5\x74\x7a\xb5\x0a\x6d\x06\x6d\xbf\x29\x4b\x66\xa8\x7d\x42\xb4\x56\x2c\xfd\xb8\x0e\x25\x1f\x97\x9b\xc5\xf3\x32\x99\x5f\xa9\x1c\xe6\x1c\x17\xab\x7e\xd0\x34\x30\xfe\xce\x85\x68\x66\x09\x4d\xd7\x41\x70\xe0\x66\x82\x27\xbe\x60\xd6\x18\xc6\xf7\x6b\xe9\x1b\x65\x5a\x29\x2e\xed\x53\xda\x9b\xb5\xb1\x6d\x37\x87\xa7\x26\xa6\x37\xde\x5a\xf2\x73\xf9\xff\xf9\xaf\xff\xf6\x1f\x29\x4c\x68\x75\x06\x87\x87\x9d\x70\xcb\x6e\x66\x7d\xab\xca\xfd\x2e\x26\x81\xcb\x8c\x4b\x6e\x49\x3d\xe6\x27\x23\x15\xcb\x9b\xe6\xbf\xf9\x4e\xe0\x15\x6f\x26\x4d\x07\xab\x15\x30\x81\x22\xf4\xb3\xae\x5c\x98\x50\x60\xa4\x7e\xc2\x41\x3c\x08\x06\x9c\x94\xc4\xb3\x49\x3b\x4e\x0b\xd8\x94\x63\xa5\xc5\x61\x60\x51\x97\x5c\x32\x41\x40\x2b\xe8\x7a\x68\x73\x1d\xea\xde\x0a\x35\x2f\x9b\x2f\x30\xad\x52\x8f\xd8\x4a\xe5\xbf\xe6\x1a\xab\x33\x72\x04\x8d\x39\xde\x57\xe4\x08\xbd\xf1\x6e\xaa\x65\xf9\xbf\xa4\xed\x82\xa1\x31\xaf\xa1\xf6\x8a\x82\x66\xa6\xe6\x78\x00\x33\x67\xc1\x14\x6a\x11\x4a\xb8\x92\xd9\xa4\xe9\x0e\x24\x9a\xb5\x5e\xb0\x18\x8e\x2f\x94\xb4\x2c\xb1\xa6\xf9\x18\xf2\xee\xfc\x8f\xee\x53\x5a\xe3\xd1\x05\x9b\xa3\x07\x49\x7f\x67\x9c\xca\x34\xa5\xc1\xb8\x3c\x6f\x1f\xb9\xa4\x06\x22\x3d\x80\x0c\x51\x40\xa6\xd1\x8f\x2f\x92\xc0\x19\x4a\x84\x39\x67\xdb\xf3\x7e\x1b\x95\xe8\x27\xfd\x58\x72\xd1\x1b\xff\xa5\xfd\xe9\xb5\x52\x12\xa6\x28\x30\xd7\xac\xf4\x2d\xcb\xd6\xe6\x05\xa7\x9a\xd0\x7f\x2d\xa0\x4d\xff\x29\x50\x4b\xd4\xbd\xf1\x5f\x56\x9e\x3a\x4e\x0d\x71\x17\x43\x93\xf0\xd1\x30\x7c\x20\xf3\xf2\x6e\x26\x02\xef\x23\xbf\x2e\x21\xc5\xe9\x95\x10\xfc\xcd\x35\x59\x95\x67\x30\xf1\xe5\x30\xb7\x6d\x3b\xef\x47\xc0\x5c\x08\xcc\x99\x00\x96\xce\x51\xfa\x29\x82\xd2\x70\x79\xa9\x6e\x88\x30\x7c\xb9\x83\xc2\xe5\x08\xac\x54\x4e\xfa\x51\xa0\xd5\x2c\xcb\x78\xf2\xeb\x6a\x4c\x9b\x10\xac\x6c\x91\x39\x01\x3c\x45\x66\x9a\x14\x3f\x81\x54\x11\xa8\x91\xb7\xaf\x68\xf5\x62\x4e\x89\x8e\xa5\xcb\x0f\x4d\x84\x56\xfe\xfe\x12\x25\x13\xe1\xd2\xb6\x9b\xab\x95\x7b\x41\x9c\x41\x2a\x35\x6b\x67\x80\x7e\x6a\x50\x70\x6b\x39\x1a\xff\x01\xd3\x5b\x1f\xe7\xde\x72\x1d\xb6\x6a\x5d\x37\x47\xc6\x33\x95\xd6\xe3\x53\xff\xef\x2c\xc6\x7b\xff\x1b\x00\x00\xff\xff\x49\xed\x6c\x61\x4b\x22\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/index.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
