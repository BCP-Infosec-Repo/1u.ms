// Code generated by vfsgen; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Readme statically implements the virtual filesystem provided to vfsgen.
var Readme = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2021, 2, 27, 20, 50, 37, 769949301, time.UTC),
		},
		"/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2021, 2, 27, 20, 50, 37, 937952113, time.UTC),
			uncompressedSize: 8457,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\xeb\x72\xdb\x38\x74\xfe\xef\xa7\x38\xd5\x74\x92\x78\xd6\x24\x2d\x29\x76\x6e\xb6\x76\x1d\x3b\x99\x68\xea\x24\xde\xb5\xb2\x49\xfa\xa7\x03\x91\x87\x24\x6c\x10\x60\x70\x91\x44\xff\xea\x43\xf4\x09\xfb\x24\x1d\x5c\x48\x5d\x9d\xda\xbb\xdb\xe9\x8f\x8c\x45\xf0\x00\x38\xd7\xef\x5c\x98\x93\x7f\xb9\xf8\x7c\x3e\xf9\x7e\xf5\x0e\x4a\x5d\x31\xb8\xfa\xf2\xf6\x72\x7c\x0e\xbd\x28\x49\xbe\x0e\xcf\x93\xe4\x62\x72\x01\xdf\x3e\x4c\x3e\x5e\x42\x3f\x3e\x84\x89\x24\x5c\x51\x4d\x05\x27\x2c\x49\xde\x7d\xea\x41\xaf\xd4\xba\x7e\x9d\x24\xf3\xf9\x3c\x9e\x0f\x63\x21\x8b\x64\xf2\x47\xb2\xb0\x67\xf5\xed\xe6\xf0\x33\xd2\x2b\x3b\xe3\x4c\x67\xbd\xd1\xde\x89\xbb\x70\x51\x31\xae\x4e\x77\x1c\xd3\x7f\xf5\xea\x95\xdf\xed\x68\x91\x64\xa3\x3d\x80\x93\x0a\x35\x01\x4b\x1d\xe1\x0f\x43\x67\xa7\xbd\x73\xc1\x35\x72\x1d\x4d\x9a\x1a\x7b\x90\xfa\xa7\xd3\x9e\xc6\x85\x4e\xec\xee\x37\x90\x96\x44\x2a\xd4\xa7\x46\xe7\xd1\xcb\x1e\x24\x3f\x3f\xe7\x5a\x37\x0c\x77\x9e\x96\x2a\xb5\xb6\x9b\x93\x0a\x4f\x7b\x05\x72\x94\x44\x0b\xb9\x42\x5e\x13\x9e\x89\xb4\x25\xd6\x54\x33\x1c\xf5\x4d\x5c\xa9\x93\xc4\x3f\xd8\x65\x46\xf9\x2d\x48\x64\xa7\x3d\x65\xaf\x54\x25\xa2\xee\x41\x29\x31\xf7\xea\x50\xaf\x93\x24\xcd\xf8\x8d\x8a\x53\x26\x4c\x96\x33\x22\x31\x4e\x45\x95\x90\x1b\xb2\x48\x18\x9d\xaa\xa4\xa0\xba\x34\xd3\xa8\x22\xf2\x36\x13\x73\x1e\xa5\x4a\x25\xc3\xf8\x30\xee\x6f\xbe\x89\x2b\xca\x63\xc7\xbf\x6e\x6a\xdc\x96\x47\xa5\x92\xd6\x1a\x94\x4c\x1f\x7c\x77\x49\x8b\x92\xd1\xa2\xd4\xf1\x8d\x4a\x5e\xc5\xfd\xa3\xb8\x7f\xb8\xb2\x68\x2f\xbc\x51\x3d\xa0\x5c\x63\x21\xa9\x6e\x4e\x7b\xaa\x24\x83\xa3\xe3\xa8\x7f\x67\x7e\x19\xbe\xe5\x97\xdf\xff\x7c\x75\x99\xd1\xef\x2f\x8f\xcc\xb7\x8f\x77\x94\x0e\xa7\x99\xbc\x45\xd6\xd4\xc3\x17\x78\xf8\xef\xcd\xe4\xec\xf7\xf2\xf0\xb4\x07\xa9\x14\x4a\x09\x49\x0b\xca\x4f\x7b\x84\x0b\xde\x54\xc2\xa8\xde\xe8\x24\xf1\x3c\xff\xa3\xec\x33\xc2\x0b\x43\x0a\x54\x89\x2a\x91\xb1\x9f\x08\xc1\xe7\x9f\x3f\x0e\x17\xef\xd2\xe3\xf3\xf7\xb9\xbc\xfa\x74\xf1\xa9\x6f\xea\x6f\xbf\x1c\x35\xfc\xe6\xeb\xbf\x9d\x7d\x53\xc5\x2f\xd3\xaf\xc7\xc3\xeb\xeb\x3b\x8d\x0f\x13\xe2\x9f\xf0\x86\x9d\x22\xf9\xd3\x92\x0c\x73\x62\x98\x5e\xfa\xc1\xb6\x48\x77\xa9\xe1\x3f\xae\x79\x9f\xb1\xe2\xec\x82\x8c\xaf\xde\x37\x77\xf2\xf7\x97\x5f\xae\xc7\x37\xdf\x06\x7f\xd6\x66\xf1\xe1\xee\xcb\xfc\x3b\x55\x9f\xe7\xe2\xe5\xfd\x22\xad\xf9\xd3\xa8\x64\x37\x2a\xa6\x9c\xea\x0f\x2d\x6b\x94\x17\x9f\xf9\xa5\x20\xd9\xb3\xfd\x37\x2b\xd2\x27\x3e\xbe\x4f\xa6\x22\x6b\x20\x65\x44\xa9\xd3\x5e\xe7\xd5\x76\xd1\x61\x40\xbf\x0d\xa2\xb2\x6f\x1f\x07\xa3\xaf\x25\xd1\x40\x15\xe8\x92\xda\xd5\xc1\x68\xef\xa4\x1e\x4d\x4a\xaa\xec\x22\x01\x55\x11\xc6\x40\xa1\x06\x91\xc3\x1d\x4a\x11\xa5\x82\xe7\xb4\x30\x92\x58\x24\x82\x8b\x4f\xd7\x60\x34\x65\x54\x53\x54\x90\x0b\x09\x44\x29\xaa\x2c\x93\x40\x39\x64\xa8\x31\x75\x84\x84\x67\x80\x8b\x9a\x09\xaa\xfd\x4e\x91\xc3\xf5\xf5\x1f\xef\x23\x89\x8c\x68\xcc\x60\x66\x98\x45\x81\x69\x38\x2b\x86\xb1\x86\x5a\x8a\x19\xcd\x50\x01\x12\xd5\x80\x16\x60\x14\xba\x2b\x25\x4e\x29\xcf\xec\x25\xfe\xf2\xe6\x00\x88\x82\x39\x32\x66\xff\x12\x98\x13\x47\x5e\xa0\x06\x89\x4a\xb0\x19\x99\x32\x74\x3f\x8d\x4c\xed\x8f\x54\xc8\x4c\xc1\x9c\xea\x12\x08\x6f\xa0\xa0\x33\xe4\x2d\xf8\xa8\xf8\x24\xa9\x83\x1e\x10\xb4\x10\x0c\x32\x81\x0a\xb8\xd0\x80\x55\xcd\x44\xe3\xf6\x70\x31\x43\x06\x1a\xd3\x92\xd3\x1f\x06\x95\x13\x91\x7a\x32\xe3\x96\xac\x06\x2c\xa5\x42\xae\x30\x86\x33\xc6\x20\x47\xa2\x8d\xb4\xc4\x12\x41\x4b\x3a\xa3\x84\x59\x4e\x69\x55\x33\xac\x90\x6b\x77\x4a\x4a\x38\x4c\xd1\x4a\x4d\x59\x03\xb9\x30\xf6\x64\x0e\x42\x97\x28\x41\xd1\x8a\x32\x22\x1d\x63\xeb\xac\x2a\x94\x33\x9a\xa2\x65\x22\x35\x52\x22\xd7\xac\x01\x69\x38\x10\x0d\xba\x44\x38\x21\x1b\xd1\xe0\x7c\x21\xe9\xb5\x3e\x41\x46\x90\x89\x8a\x50\x0e\xcf\x9c\x2c\x5a\x3d\x05\x65\xa6\x7e\x4d\xed\x77\x77\x8d\x73\x68\x84\x79\x2a\xad\x22\x89\xb3\x82\xf5\x1e\x10\x1c\x3c\x66\x1e\xb4\xaf\x0b\xe1\x5e\x0a\x28\xc9\x0c\x61\x86\xb2\x81\x92\xc8\x0c\x34\xad\xac\xf4\x4d\x78\xab\x90\xe5\x51\x29\x94\x06\xaa\x63\xb0\x92\xa4\x22\x73\x62\xa8\x92\x6a\xdd\x58\x9b\x3a\x30\x81\x6b\x4d\xa4\xf6\x66\x3b\xb1\x34\xa3\x60\xc9\xb8\x10\x27\x89\x5b\x70\xfa\xf3\xef\xaa\x26\xe3\x2b\x6f\x62\xb8\x32\x8c\x81\x44\x6b\x2c\xed\x2d\x30\x47\x96\x8a\x0a\xe1\xf5\xbe\x97\xad\x1c\x8c\xbe\x28\x52\x60\x88\x84\xf2\xf9\xe8\x2c\xf2\x57\x9c\x24\xe5\xf3\x15\xe1\x61\x4e\xb8\x6e\x5d\x8c\x04\x87\x02\x6d\x83\xc9\x3b\x1c\x2a\xfb\x96\x70\x18\x5f\x1d\x38\xb7\xb5\x06\xc8\x05\x63\x62\x6e\xa5\xee\xd4\xfa\xba\x55\x6a\xe0\x99\xdc\x62\xf4\x84\xe9\x37\xe3\xab\x27\x85\x7e\x13\x49\x19\x07\xe3\xb8\xd7\x2d\xf1\x7b\x21\x01\x17\xc4\x3a\xcd\x41\x6b\xb3\x95\x03\xfa\xf1\x20\x1e\xc6\xcf\x37\x77\xaf\xb1\xe6\xc9\x03\x65\x20\x68\x99\x91\xd8\x22\x88\x03\xf1\x5e\x60\xee\x5f\xc1\x19\x29\xd2\x70\x06\x3b\xef\xd9\xdb\xb9\x0a\xa5\x8d\xc9\x2c\x93\xa8\x14\x84\x97\x7b\x4b\x81\x24\x3a\x91\xbe\x0b\xe3\xfc\xde\xea\x2a\x23\xaa\x44\x05\x94\x2b\x8d\x24\xb3\x50\x91\x09\x6b\x31\x05\x4c\xf0\xc2\xfe\xb5\xda\x1c\x5f\x59\x17\x99\x11\x46\xb3\x47\x33\x1e\x0d\xa2\x61\xb4\xc5\xf8\xc6\xea\xe3\x18\xaf\x19\x49\x11\x94\x75\xa7\x10\xfe\xb5\xc4\x9c\x2e\x12\x65\xf2\x9c\x2e\x60\x8a\xb9\x90\xb8\x62\xa6\xd6\x2a\x16\x34\x73\x8d\xb2\x75\x69\xd9\xbe\x78\xe6\xa5\x96\x08\xc4\xfa\x0d\x66\xfb\x8f\x90\x93\xc4\xfe\xfa\x68\x43\xb4\x88\xf0\x2c\x26\x91\x67\x2a\x48\xff\x08\xda\x87\xe9\xe4\xa3\x61\x9a\xd6\x6c\x89\xb4\x01\xd1\x14\xd6\x44\x3a\xb8\x9f\x36\x41\x5c\x7b\x47\xf4\x57\xfd\x2f\x70\x6a\x8f\x38\x8a\x8e\xa3\x17\xd1\xcb\x7b\x4c\xba\x8b\x62\xa7\x28\x8f\xdb\x75\x14\x1f\xc7\x2f\xe2\x97\x9b\x0a\x28\x9f\x8f\xd6\xb2\xd4\x12\x3c\xb8\xf3\x5c\x97\x68\x16\xba\xcd\x81\x30\x35\x85\x3a\xd8\x48\x6c\x2e\xfd\xda\x8c\x16\xdd\x72\x31\xe7\xcb\x44\x03\x9a\xc8\x02\x5d\x86\x9d\x7c\x3e\x9f\x7c\xfe\xe2\x0a\x52\x7b\xd6\x46\x0a\x85\xcc\x48\x4b\x35\xbe\x82\x29\x23\xe9\x2d\x0b\x79\x59\x48\x98\x97\x54\x63\x78\x76\x99\x96\x2a\xa8\x51\xe6\x42\x56\x98\x81\x51\x96\x8c\xb4\xc0\xb2\x8e\x6a\x36\xa7\x01\xc3\x82\x6a\x7b\x70\xb8\xc2\x81\x1b\x95\x4a\xb7\xf0\x0a\xcf\xd2\x12\xd3\xdb\x7d\x07\xc7\x5a\x04\xf4\x93\x53\x9a\x65\xc8\x41\x70\x5c\xdd\xa9\x30\x15\x3c\x5b\x6e\x35\x0a\x97\xc9\x66\x62\x31\xd6\xf5\x07\xb8\x64\xc9\xf6\x0d\x3e\x0d\xb8\xcc\x33\xc5\x92\xcc\xa8\x90\x3b\x91\xb6\xe1\x9a\x2c\xee\x87\xd9\xbe\xc7\x59\xa7\xf7\xb0\x34\x78\x30\xf4\xda\xab\x56\x59\xda\x85\xc1\xfe\xe4\xfe\xf1\xab\x78\x70\xf4\xbc\xfb\xbb\x09\xcd\x73\x6a\xab\x83\xa0\x42\xa7\xea\xfb\x40\xda\xab\xb4\x44\xbe\x42\xe0\x0f\x8d\xc3\xdf\xbf\x8b\xe6\x3f\xe7\x78\xef\x31\xc4\x3b\x63\xec\xff\xe1\xe6\x75\x05\x6d\x03\x96\x2d\x3a\x98\x28\x68\x6a\x7d\x89\x7a\x05\xb7\xc5\x9a\x0b\x45\x15\x5c\x4a\x05\xad\x1a\xd6\x2a\x95\xf2\x54\xba\xd2\x8d\xb8\x36\x9b\xd1\x11\xcd\xed\x76\x57\x5e\x48\x04\x2e\x96\x35\x87\x8b\x04\xaa\x5a\x9f\x09\x31\xc0\x88\xd2\x70\x14\xc2\x40\x1d\x00\xd5\x4f\x55\xeb\x05\xcb\xe8\x71\xbe\x31\xbe\x7a\x73\x92\x30\xea\xef\x71\xf5\xe0\x9c\x2a\xbc\x67\x4b\x88\x2b\xc1\x31\x0e\x9b\x12\xc3\xb6\x92\xad\x87\x7e\x54\xdb\x09\x2a\x5a\xf5\xb8\x90\xc5\x56\x33\x55\xb4\x4c\x55\xb6\x3a\x95\x19\x4a\x57\xa4\x5b\x98\x22\x8c\xde\xe1\x56\x7c\x3c\xc3\xb8\x88\xc3\xee\xb5\x94\xf3\xbf\xd9\x74\x2d\x07\x85\x4b\xf7\x7d\xad\x68\x8b\x49\x61\x42\xa2\x6c\x13\x8c\x6b\x45\x90\xa4\xe5\xea\xf5\x1b\x05\x2c\x70\xf4\xba\x4a\x4b\xc2\x8b\xc0\xac\x6f\xf2\x96\xd6\x68\x8f\xff\xbb\xd0\x92\x0b\x69\x17\x6d\xcf\x28\x67\x84\xb9\x37\x0f\x40\x9b\xb9\xf3\x23\x7f\xf2\xe6\xfe\x4e\xf7\xca\x55\x1d\xba\x74\xbe\x44\x6f\x5b\xfa\xfe\x61\x87\x2e\xcf\xfa\x87\xad\x40\xfb\x16\xff\x3d\xc1\x51\xd5\xbd\x3f\x82\x8a\x72\xa3\x71\xab\xca\x0f\x4a\xb2\x29\xa0\xd7\x65\x0d\xcc\x7a\x16\xfc\x9f\xcd\x4b\x9a\x96\xf6\xfe\xf1\x55\xdf\xb9\x80\xe9\xb0\x51\xed\xdb\x7c\x2f\x51\x1b\xc9\x31\x83\xaa\x2d\x08\xac\x3a\x3b\x57\xeb\xb2\xdd\xff\x81\x76\x9d\xa3\xda\x45\x6e\x2a\xfb\xec\x2e\x7e\x34\xc0\xdf\x0b\xe8\xb9\x90\xc3\x43\xe5\x2e\x19\xf8\xa3\xfb\x83\x17\xf1\x61\x7c\x18\xf7\x77\x63\x7b\x8b\xea\x5d\xa5\xbe\x81\xea\x3e\xbe\xf5\x5c\x78\x15\x1d\x2c\x61\xfe\x9e\xed\xed\x75\xdd\x01\x42\x02\xb7\x55\xc5\xb0\xb3\x75\xb0\xa5\x6d\x63\xce\xce\xb6\x3a\x99\x89\x70\xe8\x0b\xa6\xbe\x2f\xd7\x0b\xce\x9a\xae\x8d\x99\x1d\xb7\x70\xfa\x38\x6b\xd1\x3a\x9a\x1d\x3f\xa0\xa7\x39\x17\x4c\x70\x05\x95\x51\xda\xbb\x8e\x2b\xa8\x33\x9f\xe6\x19\xea\x25\xee\xa4\x5d\x47\x77\xa6\x80\xb0\x39\x69\xd4\x01\x48\xc2\x33\x51\x05\x34\x5b\x45\xac\x50\x7a\x1a\x85\x8f\x68\x13\xce\xce\xce\x60\x15\xa0\xbc\x10\xfd\x74\x90\xa6\xc3\x4d\x38\xda\x7b\x28\xa1\x4b\x49\xab\x8a\x84\xfe\xeb\xc1\xeb\xd7\xc3\x1d\xe5\xe3\xf9\xa7\xb3\x8f\xef\x54\x67\xaa\xb7\x4d\x8b\x4c\x07\x60\x78\x4d\xa4\x72\x03\x8d\x70\x4c\x18\x27\xa4\x82\x2b\x9a\xa1\xc4\xcc\xa6\x2b\x7f\xc2\xc3\x24\x76\x9c\x07\x9f\x8f\x53\x51\x6d\x64\xdc\x5d\x6f\x5c\x52\xe4\x40\x18\x25\x7e\xee\xb3\x42\x14\xef\xc5\x71\xbc\x23\xc7\x0a\x4b\x98\xae\x94\x71\x5a\x58\xcb\x10\xcf\xeb\x81\x15\xa7\xb5\xb0\x85\xeb\x2e\xfd\x78\xfd\x3e\xb6\x9c\xf1\x67\xdc\x2f\xd5\xfd\xef\xff\x82\x6c\x9f\x84\x46\x1f\x3c\x5e\xef\xce\x6b\x85\xd1\xd0\xb5\x70\xeb\xd6\x59\x8e\x55\xbc\x7f\x1b\xde\xce\xc1\xbc\x34\xca\x4c\x63\x55\xc6\x37\x5d\x93\xd8\x0e\x66\x94\x36\x35\xcd\x96\xf3\x22\x3f\x4c\xcb\x50\x13\xca\xf6\x0f\xa0\x43\xe4\x5a\x8a\x29\x99\xb2\xc6\x8d\xa3\xe6\x96\xb1\x76\x6a\xf1\x58\x3d\x32\x91\x12\x66\xd7\x36\xf4\xb7\xbd\xbe\xa5\xb7\x8e\x24\xee\xe4\xd9\xd2\x5d\xf9\x7c\xf4\xd9\xcd\xb5\xda\x19\x4a\x53\xa3\x5a\x9d\xb6\x58\x9c\xf1\xb9\x6d\x8a\x7a\x8e\xc8\xef\xab\x50\xb6\x8b\x12\xdb\x42\x75\xc1\xe2\xcf\xb7\xa5\x92\x7d\xd1\x65\x26\x37\xb3\xe4\x4d\xd7\x44\x85\x5a\x2d\x7e\xa8\x96\x26\xdf\x26\x5e\x4f\x53\x46\x4a\xfb\x6f\x43\x4d\x5b\xcb\x90\xa1\x1f\xda\x52\x5b\xe3\x5b\xc0\x7e\xf2\xc3\x08\xfd\xa6\x25\xf4\x4f\x3b\xd4\xf4\x01\x17\x80\x3c\x15\x6b\x1d\x65\x5b\xc9\xb9\x17\xb8\xec\x2e\xb9\x56\x56\x9a\x6e\x34\x45\x39\x94\xe8\x71\xd1\x86\x19\x09\xda\x2a\x71\xb1\x11\x66\x6b\x15\xde\xaa\x8e\x1f\xeb\x37\xf6\xe8\x61\x7f\x80\xc3\xc1\x00\x87\xc3\x01\x0e\x37\x0b\xf9\x9f\x10\x3c\x64\xca\x50\x3e\xf7\x51\x17\xa6\xd0\x93\xc9\xe5\xd2\x6d\xae\x45\xe5\xc7\xa1\x28\x95\x1b\xde\xf2\xa7\xba\x1b\xd9\x95\x84\x67\x0c\xdd\x34\xdb\xee\x72\x99\xc6\x4d\x9c\x2f\x42\xf1\x67\x17\xa9\x82\xbe\xf3\x8d\x5e\x98\xaa\xf6\xa0\x0d\x58\xab\xc3\x43\xf7\xce\x15\xe0\x6a\xb3\x62\x6a\xef\x09\x65\xe5\x64\x72\xb9\x0a\x6d\x0a\x75\x14\xca\x92\x29\x4a\x97\x10\xb5\x66\x4b\x3f\x6e\x7c\xc9\x47\xf9\x66\xf1\xbc\x4c\xe6\x97\xa2\x80\x19\xc5\xf9\xaa\x1f\x84\x06\xc6\xd9\x9c\xb1\x30\x4b\x08\x5d\x87\x85\x03\x33\x65\x34\x75\x05\xb3\x44\x3f\x7c\x5e\x4b\xdf\xc8\xb3\x5a\x50\xae\x1f\xd2\xde\xac\x8d\x91\xbb\x29\xb2\x6d\x62\x7a\xa3\xad\x25\x37\x55\xfe\xef\xff\xfc\x2f\x37\x62\x57\xbe\xd5\xe9\x1f\x1e\x76\xcc\x2d\xbb\x99\xf5\xad\xa2\x70\xbb\x08\x07\xca\x73\xca\xa9\xb6\xe2\xf9\x61\x73\x4d\x8a\xd0\xfc\x87\x29\xb7\x13\x3c\x4c\x9a\x0e\x56\x2b\x60\x0b\x8a\x10\xe5\x5d\xb9\x30\xb6\x81\x91\xb9\x09\x87\x3d\xc3\xc2\x80\xe1\xdc\x9e\x19\xd2\x8e\x91\x0c\x36\xf9\x58\x69\x71\x08\x68\x94\x15\xe5\x84\x59\xa0\x65\xd6\x3c\x76\x73\xe3\xeb\xde\x1a\x25\xad\xc2\xf7\x83\x56\xa8\x7b\x74\x25\x8a\x5f\x0b\x89\xf5\xa9\x75\x04\x89\x05\x2e\x6a\xeb\x08\x9b\xea\x6b\xa9\x96\xe5\xff\x92\xb6\x0b\x86\xa0\x5e\x65\xdb\x2b\x1b\x34\x53\x31\xc3\x03\x98\x1a\x0d\xaa\x14\x73\x5f\xc2\x55\x44\xa7\xa1\x3b\xe0\xa8\xd6\x7a\xc1\x72\x30\x3a\x17\x5c\x93\x54\x2b\x78\x42\xaa\xfa\x0d\xbc\x3f\xfb\xbd\xfb\x10\x14\x3c\xda\x8d\xef\x2d\x48\x3a\x9b\x51\x5b\xa6\x09\x09\xca\x14\x45\xfb\x48\xb9\x6d\x20\xb2\x03\xc8\x11\x19\xe4\x12\xdd\xf8\x22\xf5\x27\x43\x85\x30\xa3\x64\xfb\xfb\x83\x8e\x2b\x4c\x38\xe2\x02\x2b\xca\x7a\xa3\xdf\xda\x9f\x4e\x2a\xc1\x61\x82\x0c\x0b\x49\x2a\xd7\xb2\x6c\x6d\x9e\x53\x5b\x13\xba\x2f\x78\x76\xd3\x7f\x30\x94\x1c\x65\x6f\xf4\xdb\xca\x53\x77\x52\x20\xee\x62\x68\xec\x3f\x79\xf9\xcf\x3b\x8e\xdf\xcd\x44\xe0\x7c\xe4\xd7\x25\xa4\x18\xb9\x12\x82\x6f\x4d\xc8\xaa\x34\x87\xb1\x2b\x87\xa9\x6e\xdb\x79\x37\x02\xa6\x8c\x61\x41\x18\x90\x6c\x86\xdc\x4d\x11\x84\x84\x8b\x0b\x71\x6d\x09\xfd\x77\x27\x28\x4d\x81\x40\x2a\x61\xb8\x1b\x05\x6a\x49\xf2\x9c\xa6\xbf\xae\xc6\xb4\xf2\xc1\x4a\xe6\xb9\x61\x40\x33\x24\x2a\xa4\xf8\x31\x64\xc2\x82\x9a\xf5\xf6\x15\xa9\x9e\xce\xfc\x47\x99\x90\x08\x32\x74\x68\xe5\xec\x97\x0a\x9e\x32\x93\xb5\xdd\x5c\xf8\x44\x43\x80\x0b\x31\x6d\x67\x80\x6e\x6a\x50\x52\xad\x29\x2a\xf7\xf9\xcd\x69\x1f\x67\x4e\x73\x1d\xb6\x4a\xd9\x84\x2b\x93\xa9\xc8\x9a\xd1\x89\xfb\x5f\x02\xa3\xbd\xff\x09\x00\x00\xff\xff\xaa\xcf\x44\x76\x09\x21\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/index.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
