// Code generated by vfsgen; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Readme statically implements the virtual filesystem provided to vfsgen.
var Readme = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2021, 2, 28, 9, 53, 43, 246016003, time.UTC),
		},
		"/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2021, 2, 28, 9, 53, 43, 402017248, time.UTC),
			uncompressedSize: 8491,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xc4\x5a\xdf\x56\xdc\x38\xd2\xbf\xe7\x29\xea\xeb\xf3\x9d\x24\x9c\xc1\x36\xdd\x0d\x24\x21\xd0\x33\x04\x92\x2f\x9c\x8f\x24\xcc\xd0\x99\x24\x7b\xb3\x47\x6d\x97\x6d\x05\x59\x72\x24\xb9\x8d\xb9\xda\x87\xd8\x27\xdc\x27\xd9\x53\x92\xed\xfe\x43\x93\x85\x9d\xd9\xb3\x17\x33\xb4\xe5\x92\x54\x55\x2a\xfd\xea\x57\xe5\x1c\xfd\xcf\xd9\xc7\xd3\xe9\xd7\xcb\x37\x90\xdb\x42\xc0\xe5\xa7\xd7\x17\xe7\xa7\x30\x08\xa2\xe8\xf3\xf8\x34\x8a\xce\xa6\x67\xf0\xe5\xdd\xf4\xfd\x05\x0c\xc3\x5d\x98\x6a\x26\x0d\xb7\x5c\x49\x26\xa2\xe8\xcd\x87\x01\x0c\x72\x6b\xcb\xc3\x28\xaa\xeb\x3a\xac\xc7\xa1\xd2\x59\x34\xfd\x2d\xba\xa1\xb5\x86\x34\xb9\xfd\x19\xd8\xa5\x99\x61\x62\x93\xc1\x64\xeb\xc8\x6d\x78\x53\x08\x69\x8e\x37\x2c\x33\x7c\xf9\xf2\xa5\x9f\xed\x64\x91\x25\x93\x2d\x80\xa3\x02\x2d\x03\x92\x0e\xf0\x7b\xc5\xe7\xc7\x83\x53\x25\x2d\x4a\x1b\x4c\x9b\x12\x07\x10\xfb\xa7\xe3\x81\xc5\x1b\x1b\xd1\xec\x57\x10\xe7\x4c\x1b\xb4\xc7\x95\x4d\x83\x17\x03\x88\x7e\xbc\xce\x95\x6d\x04\x6e\x5c\x2d\x36\x66\x65\xb6\x64\x05\x1e\x0f\x32\x94\xa8\x99\x55\x7a\x49\xbc\x64\x32\x51\x71\x27\x6c\xb9\x15\x38\x19\x56\x61\x61\x8e\x22\xff\x40\xc3\x82\xcb\x6b\xd0\x28\x8e\x07\x86\xb6\x34\x39\xa2\x1d\x40\xae\x31\xf5\xee\x30\x87\x51\x14\x27\xf2\x9b\x09\x63\xa1\xaa\x24\x15\x4c\x63\x18\xab\x22\x62\xdf\xd8\x4d\x24\xf8\xcc\x44\x19\xb7\x79\x35\x0b\x0a\xa6\xaf\x13\x55\xcb\x20\x36\x26\x1a\x87\xbb\xe1\x70\xfd\x4d\x58\x70\x19\x3a\xfd\x6d\x53\xe2\x5d\x7b\x4c\xac\x79\x69\xc1\xe8\xf8\xc1\x7b\xe7\x3c\xcb\x05\xcf\x72\x1b\x7e\x33\xd1\xcb\x70\xb8\x1f\x0e\x77\x97\x06\x69\xc3\x6f\x66\x00\x5c\x5a\xcc\x34\xb7\xcd\xf1\xc0\xe4\x6c\xb4\x7f\x10\x0c\x6f\xab\x9f\xc6\xaf\xe5\xc5\xd7\xdf\x5f\x5e\x24\xfc\xeb\x8b\xfd\xea\xcb\xfb\x5b\xce\xc7\xb3\x44\x5f\xa3\x68\xca\xf1\x73\xdc\xfd\x4b\x33\x3d\xf9\x35\xdf\x3d\x1e\x40\xac\x95\x31\x4a\xf3\x8c\xcb\xe3\x01\x93\x4a\x36\x85\xaa\xcc\x60\x72\x14\x79\x9d\xff\x54\xf5\x05\x93\x59\xc5\x32\x34\x91\xc9\x51\x88\x1f\x18\x21\xeb\x8f\xef\xc7\x37\x6f\xe2\x83\xd3\xb7\xa9\xbe\xfc\x70\xf6\x61\x58\x95\x5f\x7e\xda\x6f\xe4\xb7\xcf\xff\x7f\xf2\xc5\x64\x3f\xcd\x3e\x1f\x8c\xaf\xae\x6e\x2d\x3e\xcc\x88\x3f\x23\x1a\x36\x9a\xe4\x57\x8b\x12\x4c\x59\x25\xec\x22\x0e\xee\x9a\x74\x1b\x57\xf2\xfb\x95\x1c\x0a\x91\x9d\x9c\xb1\xf3\xcb\xb7\xcd\xad\xfe\xf5\xc5\xa7\xab\xf3\x6f\x5f\x46\xbf\x97\xd5\xcd\xbb\xdb\x4f\xf5\x57\x6e\x3e\xd6\xea\xc5\xfd\x26\xad\xc4\xd3\x24\x17\xdf\x4c\xc8\x25\xb7\xef\x3a\xd5\xb8\xcc\x3e\xca\x0b\xc5\x92\x67\xdb\xaf\x96\xac\x8f\xfc\xfd\x3e\x9a\xa9\xa4\x81\x58\x30\x63\x8e\x07\x7d\x54\xd3\xa0\xc3\x80\x61\x77\x89\xf2\x21\x3d\x8e\x26\x9f\x73\x66\x81\x1b\xb0\x39\xa7\xd1\xd1\x64\xeb\xa8\x9c\x4c\x73\x6e\x68\x90\x81\x29\x98\x10\x60\xd0\x82\x4a\xe1\x16\xb5\x0a\x62\x25\x53\x9e\x55\x9a\x11\x12\xc1\xd9\x87\x2b\xa8\x2c\x17\xdc\x72\x34\x90\x2a\x0d\xcc\x18\x6e\x48\x49\xe0\x12\x12\xb4\x18\x3b\x41\x26\x13\xc0\x9b\x52\x28\x6e\xfd\x4c\x95\xc2\xd5\xd5\x6f\x6f\x03\x8d\x82\x59\x4c\x60\x5e\x09\x42\x81\x59\xbb\x56\x08\xe7\x16\x4a\xad\xe6\x3c\x41\x03\xc8\x4c\x03\x56\x41\x65\xd0\x6d\xa9\x71\xc6\x65\x42\x9b\xf8\xcd\x9b\x1d\x60\x06\x6a\x14\x82\xfe\x32\xa8\x99\x13\xcf\xd0\x82\x46\xa3\xc4\x9c\xcd\x04\xba\x9f\x95\x8e\xe9\x47\xac\x74\x62\xa0\xe6\x36\x07\x26\x1b\xc8\xf8\x1c\x65\x07\x3e\x26\x3c\x8a\xca\xd6\x0f\x08\x56\x29\x01\x89\x42\x03\x52\x59\xc0\xa2\x14\xaa\x71\x73\xa4\x9a\xa3\x00\x8b\x71\x2e\xf9\xf7\x0a\x8d\x33\x91\x7b\xb1\xca\x0d\x91\x07\x48\xd2\xa0\x34\x18\xc2\x89\x10\x90\x22\xb3\x95\x26\x61\x8d\x60\x35\x9f\x73\x26\x48\x53\x5e\x94\x02\x0b\x94\xd6\xad\x12\x33\x09\x33\x24\xab\xb9\x68\x20\x55\x15\xad\x2c\x41\xd9\x1c\x35\x18\x5e\x70\xc1\xb4\x53\x6c\x55\x55\x83\x7a\xce\x63\x24\x25\xe2\x4a\x6b\x94\x56\x34\xa0\x2b\x09\xcc\x82\xcd\x11\x8e\xd8\xda\x6d\x70\xb1\x10\x0d\xba\x98\x60\x13\x48\x54\xc1\xb8\x84\x67\xce\x16\x6b\x9e\x82\xa9\x66\x7e\xcc\x6c\xb7\x7b\xe5\x7b\x93\x2b\xef\xc6\x58\x25\x08\x4f\x58\x51\xbe\x02\x83\x22\x0d\x72\x65\xec\x51\x94\xef\x2d\x14\xf2\x72\x14\x49\x73\xc6\x85\x3b\x04\x25\xef\xea\xe1\xa1\xd6\xdd\x45\x89\x78\xe3\xf5\x1a\x4c\xfc\x30\xe9\x15\xc2\x3b\x55\xe3\x1c\xf5\x8e\x33\xc4\x6d\xcc\x0d\x98\x9c\x5b\xdb\xd0\x91\x3b\xac\xe9\x7c\x71\x9e\x42\xa3\x2a\xa8\x99\xb4\xe4\xdb\x5e\x37\xe0\x76\x07\x52\x25\x84\xaa\x5d\xbc\x83\xb1\x58\x9a\x43\x3f\x4d\x89\xee\xd6\x70\x19\x6b\x77\x16\xcc\xe5\x4d\xc1\x27\xff\x87\x16\x58\xe7\x1b\xca\x59\x14\xbd\x8d\xaa\x34\xc4\xb9\x22\x8f\x93\xbb\xca\xca\x82\x0b\x4d\x1f\x5b\x46\x81\xa5\xbb\xe5\xc4\xe8\x64\xb0\xfd\x63\xfc\xb8\x5f\x2d\x3c\x8a\x04\xf7\x9b\x5c\xa2\x4e\x95\x2e\xe0\x88\xac\x9b\x64\x3e\x7a\x37\x7a\xe6\x28\x72\x22\x4b\x73\xcf\x54\x2d\x85\x62\x89\x53\xa4\x50\x09\x4f\x9b\x07\x7a\x39\x9a\x09\x35\x8b\x0a\x66\x2c\x6a\x3f\x12\x36\x8c\x08\xc3\xe2\xb7\x3b\x80\xc5\x5e\xbf\x55\x12\x04\xbf\x46\xe7\xc2\xc3\x56\x5d\x27\x0d\xcb\x73\x56\x54\x8c\x94\xf0\x70\xf3\xc9\xb0\x0c\x5b\x9c\xc9\xf7\x26\x27\x81\x77\x57\x1f\x35\x6b\x47\x97\x39\xc7\x7b\x19\xef\x36\x7f\x9d\xc9\x89\x0a\x98\x84\xf3\xcb\x1d\x07\x0a\x14\x15\xfe\x64\x09\x14\xfa\xa0\x3d\xec\x42\xc2\x6b\x59\xb0\x6b\x0c\x9e\x08\xfb\xea\xfc\xf2\x49\x66\x5f\x05\x5a\x87\xcb\x0e\xed\x84\xdf\x2a\x0d\x78\xc3\xe8\x4a\xee\x74\xa7\xbe\xb4\xc0\x30\x1c\x85\xe3\x70\x6f\x7d\xf6\x8a\x6a\xad\x57\xbc\x64\x2b\xd0\x29\xa3\xb1\x8b\x34\x97\x22\x07\xad\x72\xff\x0b\x2e\x46\x03\x0b\x27\xb0\x71\x9f\xad\x8d\xa3\x90\x13\xe2\x25\x89\x46\x63\xa0\x7d\xb9\xb5\x30\x48\xa3\x33\xe9\xab\xaa\x1c\xaa\x90\xaf\x12\x66\x72\x34\xc0\xa5\xb1\xc8\x12\x0a\xe5\x44\x59\x43\xb7\x48\x28\x99\xd1\x5f\xf2\xe6\xf9\x25\xdd\xb0\x39\x13\x3c\x79\xb4\xe2\xc1\x28\x18\x07\x77\x14\x5f\x1b\x7d\x9c\xe2\xa5\x60\x31\x01\x4a\x81\x1d\xb8\x96\x1a\x53\x7e\x13\x99\x2a\x4d\xf9\x0d\xcc\x30\x55\x1a\x97\x8e\xa9\x3b\x15\x4a\x49\xa9\x45\xdd\xbe\xd2\xba\x7b\xf1\xcc\x5b\xad\x11\x18\xc5\x0d\x26\xdb\x8f\xb0\x93\x85\x7e\xfb\x60\xcd\xb4\x80\xc9\x24\x64\x81\x57\xaa\xb5\xfe\x11\xb2\x0f\xf3\xc9\xfb\x4a\x58\x5e\x8a\x45\x1e\x6b\xf3\x85\xc1\x92\x69\x97\x4c\x67\x4d\x6b\x2e\xed\x11\xfc\xbb\xf1\xd7\x6a\x4a\x4b\xec\x07\x07\xc1\xf3\xe0\xc5\x3d\x47\xba\x49\x62\xa3\x29\x8f\x9b\xb5\x1f\x1e\x84\xcf\xc3\x17\xeb\x0e\xc8\xf7\x26\x2b\x1c\x60\x01\x1e\xb2\xcd\x0e\x92\xc8\x79\xc7\x30\x60\x56\x65\x66\x67\x8d\x36\x38\x72\x43\x7c\x21\xb8\x96\xaa\x96\x8b\x34\x0e\x96\xe9\x0c\x1d\x7f\x99\x7e\x3c\x9d\x7e\xfc\xe4\xe8\x3e\xad\xb5\x46\x50\x20\xa9\x34\x49\x9d\x5f\xc2\x4c\xb0\xf8\x5a\xb4\xac\x47\x69\xa8\x73\x6e\xb1\x7d\x76\x3c\x86\x1b\x28\x3d\xba\x63\x02\x95\x21\xb1\x3e\x9d\xac\xa2\x1a\x31\x06\x10\x98\x71\x4b\x0b\xb7\x5b\x38\x70\xe3\xda\x90\x1c\x31\x0d\x0b\xcf\xe2\x1c\xe3\xeb\x6d\x07\xf7\x56\xb5\xe8\xa7\x67\x3c\x49\x50\x82\x92\xb8\x3c\xd3\x60\xac\x64\xb2\x98\x5a\x19\xdc\x5e\xd0\x06\xc2\x58\x57\x7d\xe1\x5a\x86\x73\xdc\xc8\x65\xc9\x19\xe6\x6c\xce\x95\xde\x88\xb4\x8d\xb4\xec\xe6\x7e\x98\x1d\x7a\x9c\x75\x7e\x6f\x87\x46\x0f\x86\x5e\xda\x6a\x59\xa5\x4d\x18\xec\x57\x1e\x1e\xbc\x0c\x47\xfb\x7b\xfd\xdf\x75\x68\xae\x39\x71\xaf\xd6\x85\xce\xd5\xf7\x81\xb4\x77\x69\x8e\x72\x49\xc0\x2f\x1a\xb6\x7f\xff\x28\x9a\xff\x58\xe3\xad\xc7\x08\x6f\xbc\x63\xff\x85\x9d\x57\x1d\x74\x17\xb0\x88\x0b\x0a\x95\xf1\x98\x62\x89\x7b\x07\x77\x54\xd8\x5d\x45\xd3\x86\x54\x47\xc6\xaa\x1f\x90\x31\x9e\xd2\x74\x8d\x50\xd3\xff\xa4\xea\x22\xdb\xf8\x9b\xc0\x4d\x17\x33\xed\x1d\x10\xcc\x58\xd8\x6f\xaf\x81\xd9\x01\x6e\x9f\x9a\x2e\x0a\x16\xb7\xc7\xc5\xc6\xf9\xe5\xab\x05\xcf\x71\x6c\xbb\xe6\x06\xef\x99\xd2\xde\x2b\x25\xb1\x67\x39\x95\xb8\x93\x6c\x3d\xf4\xa3\xb9\x9b\xa0\x82\xe5\x88\x6b\xb3\xd8\x72\xa6\x0a\x16\xa9\x8a\xb8\xbf\x4e\x50\xbb\x12\x88\x60\x8a\x09\x7e\x8b\x77\xee\xc7\x33\x0c\xb3\xb0\x9d\xbd\x92\x72\xfe\xd5\x99\xae\xe4\xa0\x76\xd3\xed\x10\x5c\xf9\xc3\x0b\x54\x55\x9b\x28\xbb\x04\xe3\x0a\x3d\x64\x71\xbe\xbc\xfd\x3a\xfd\x96\xe8\x7d\x15\xe7\x4c\x66\xad\xb2\xbe\x84\x5e\x9c\x46\xb7\xfc\x1f\x85\x96\x54\x69\x1a\xa4\x8a\x5c\xcf\x99\x70\x6f\x1e\x80\x36\xb5\x8b\x23\xbf\xf2\xfa\xfc\xde\xf7\xc6\xb1\x0e\x9b\xbb\x58\x22\xde\xdb\xa2\xc2\x6e\x8f\x2e\xcf\x86\xbb\x9d\x41\xdb\x84\xff\x5e\x60\xbf\xe8\xdf\xef\x43\xc1\x65\x65\xd1\x6c\x6f\x76\x12\xa5\x80\x41\x9f\x35\x30\x19\x10\xf8\x3f\xab\x73\x1e\xe7\xb4\xff\xf9\xe5\xd0\x85\x40\xd5\x63\xa3\xd9\xa6\x7c\xaf\xd1\x56\x5a\x62\x02\x45\x47\x08\xc8\x9d\x7d\xa8\xf5\xd9\xee\x3f\xe0\x5d\x17\xa8\x34\x28\xab\x82\x9e\xdd\xc6\x8f\x06\xf8\x7b\x01\x3d\x55\x7a\xbc\x6b\xdc\x26\x23\xbf\xf4\x70\xf4\x3c\xdc\x0d\x77\xc3\xe1\x66\x6c\xef\x50\xbd\x67\xea\x6b\xa8\xee\xef\xb7\xad\x95\x77\xd1\xce\x02\xe6\xef\x99\xde\x6d\xd7\x2f\xa0\x34\x48\x62\x15\xe3\xfe\xac\x17\xf5\xf0\xc9\xc9\xc9\x9d\x4a\x66\xaa\x1c\xfa\x42\x55\xde\x97\xeb\x95\x14\x4d\x5f\xc6\xcc\x0f\x3a\x38\x7d\xdc\x69\xf1\x32\x98\x1f\x3c\xa0\xa6\x39\x55\x42\x49\x03\x45\x65\xac\x0f\x1d\x47\xa8\x13\x9f\xe6\x05\xda\x05\xee\xc4\x5d\xed\x06\x27\x06\x98\xa8\x59\x63\x76\x40\x33\x99\xa8\xa2\x45\xb3\x65\xc4\x6a\xa9\x67\x65\xf0\x11\x65\xc2\xc9\xc9\x09\x2c\x03\x94\x37\x62\x18\x8f\xe2\x78\xbc\x0e\x47\x5b\x0f\x15\x74\x29\x69\xd9\x91\x30\x3c\x1c\x1d\x1e\x8e\x37\xd0\xc7\xd3\x0f\x27\xef\xdf\x98\xfe\xa8\x5e\x37\x1d\x32\xed\x40\x25\x4b\xa6\x8d\xeb\x54\xb4\xcb\xb4\xcd\x9a\x58\x49\xc3\x13\xd4\x98\x50\xba\xf2\x2b\x3c\xcc\x62\xa7\x79\x1b\xf3\x54\x7d\xaf\x65\xdc\x4d\x6f\x5c\x52\x94\xc0\x04\x67\xbe\xab\xb6\x24\x14\x6e\x85\x61\xb8\x21\xc7\x2a\x12\x8c\x97\x68\x9c\x55\x74\x32\xcc\xeb\xba\x43\xe6\x74\x27\x4c\x70\xdd\xa7\x1f\xef\xdf\xc7\xd2\x19\xbf\xc6\xfd\x56\xdd\xff\xfe\xd1\xb6\xe5\x7b\x93\x8f\xae\xf3\xd5\xf5\x01\x9a\x12\xcd\x72\xc7\x80\xee\x8a\xc7\xe7\x19\xda\x1a\x51\xde\x97\x65\xef\x26\x56\x2a\x03\xfa\x03\xf7\xeb\x53\xba\xa7\x17\x3d\xba\xba\xae\xa6\x6c\xfa\x42\xa0\xe5\x1b\xe1\x43\x3d\x36\xfd\x32\xf5\x3e\x9b\x09\x96\xd3\x7f\x6b\xae\xba\x33\x0c\x09\xfa\xb6\x2e\x27\x9e\x4a\xa0\xf3\xe4\x7b\xa5\xec\xab\x4e\xd0\x3f\x6d\x70\xd3\x3b\xbc\x01\x94\xb1\x5a\xa9\x8a\x3a\x36\xe2\x5e\xe0\xa2\x42\x92\xd6\x90\x35\x7d\x7b\x85\x4b\xc8\xd1\xdf\x6d\x0a\x15\xd6\x7a\x2b\xc7\x9b\xb5\x50\x59\x61\x29\xcb\x3e\x7e\x6c\x0c\xd1\xd2\xe3\xe1\x08\xc7\xa3\x11\x8e\xc7\x23\x1c\xaf\x93\xd1\x1f\x08\x3c\xa4\x52\xce\xf7\x26\x1f\x94\x75\x2d\x47\xaa\xfe\xa6\xd3\x8b\x45\xd8\x5c\xa9\x02\xdb\xb6\x9c\x71\xed\x5d\xf9\xd4\xf6\x6d\xa7\x9c\xc9\x44\xa0\xeb\x77\xd3\x2c\x87\x96\xae\x27\x7d\xd6\x12\x18\x1a\xe4\x06\x86\x2e\x36\x06\x6d\xdf\x75\xd0\x5e\x3c\xdf\x09\xde\x75\xef\x1c\x89\x34\xf7\x75\x26\x5b\x6a\x34\x9d\x5e\x2c\x5f\x4f\x83\x36\x68\x53\xeb\x0c\xb5\x03\x75\x6b\xc5\x22\x8e\x1b\x4f\x5b\xb8\x5c\x27\x80\x8b\x84\x74\xa1\x32\x98\x73\xac\x97\xe3\xa0\x25\xe1\xee\xcc\x85\x68\xeb\xe1\x96\x39\x53\x81\x5a\xcd\x04\x8f\x1d\xe9\xd3\xe8\xdb\xd3\x2b\x29\x08\x65\x52\x2a\x2e\xed\x43\x28\xfa\x4a\xeb\xb1\xef\x33\x13\x11\x1f\x4c\xee\x0c\xb9\xbe\xf3\x3f\xfe\xf6\x77\xd7\x84\x37\x9e\xae\x0f\x77\x77\x7b\xe5\x16\x8c\x7c\x75\xaa\xca\xdc\x2c\x26\x81\xcb\x94\x4b\x6e\xc9\x3c\xe6\xaa\xfb\x92\x65\x6d\x01\xdb\xf6\xc1\x9d\xe1\x6d\xb7\x64\x67\x99\xc5\x59\xc6\x05\x04\x69\x9f\xf2\xce\xe9\x62\x24\xae\x4a\xa7\x35\x08\x06\x2a\x29\x69\xcd\x16\x3a\x2b\x2d\x60\x5d\x8f\x25\x9a\xce\xc0\xa2\x2e\xb8\x64\x02\xea\x9c\x0b\x3a\x1e\x9a\xdc\x78\xee\x56\xa2\xe6\x45\xfb\x85\xa1\x33\xea\x1e\x5f\xa9\xec\xe7\x4c\x63\x79\x4c\x81\xa0\x31\xc3\x9b\x92\x02\x61\x30\xd9\x2c\xb5\xa0\xb0\x0b\xd9\xfe\x32\xb4\xee\x35\x54\x22\xd0\xa5\x99\xa9\x39\xee\xc0\xac\xb2\x60\x72\x55\x7b\x1a\x52\x30\x1b\xb7\x0c\x57\xa2\x59\xa9\x67\xf2\xd1\xe4\x54\x49\xcb\x62\x6b\xda\x66\xff\xdb\x93\x5f\xfb\x4f\x45\x6d\x44\xe7\x6c\x8e\x0e\x24\xdd\x99\x71\xa2\x1a\x4a\x83\xa9\xb2\xac\x7b\xe4\x92\x48\x70\xb2\x03\x29\xa2\x80\x54\xa3\x2b\xc1\x63\xbf\x32\x14\x08\x73\xce\xee\xf6\xac\x6d\x58\xa0\xeb\x56\x63\xc1\xc5\x60\xf2\x4b\xf7\xd3\x59\xa5\x24\x4c\x51\x60\xa6\x59\xe1\x68\xf7\x9d\xc9\x35\x27\x5e\xe3\x3a\xde\x34\xe9\xaf\x02\xb5\x44\x3d\x98\xfc\xb2\xf4\xd4\xaf\xd4\x0a\xf7\x77\xe8\xdc\x7f\x14\xf3\x1f\x80\x9c\xbe\xeb\x89\xc0\xc5\xc8\xcf\x0b\x48\xa9\xf4\xd2\x15\x7c\x5d\x59\xa8\xdd\xc7\xb5\x14\xce\x1d\xa5\xe3\xb6\x2b\x49\x5d\x1b\x93\x0b\x81\x19\x13\xc0\x92\x39\x4a\x57\x09\x2b\x0d\x67\x67\xea\x8a\x04\xfd\x97\x29\xc8\xab\x0c\x81\x15\xaa\x92\xae\x9d\x65\x35\x4b\x53\x1e\xff\xbc\x7c\xa7\x8d\xbf\xac\xac\x4e\x2b\x01\x3c\x41\x66\xc0\x17\x0e\xe7\x90\x28\x02\x35\x8a\xf6\x25\xab\x9e\xce\x29\xd1\xb1\x64\xf1\x21\x85\xd0\xca\x9d\x5f\xac\x64\x2c\xaa\xa4\xab\x48\x1a\x55\x3d\xa5\x95\x41\x2a\x35\xeb\xfa\x58\xae\xf2\xcd\xb9\xb5\x1c\x8d\xfb\x40\xe7\xbc\x8f\x73\xe7\xb9\x1e\x5b\xb5\x6e\xda\x2d\xa3\x99\x4a\x9a\xc9\x91\xfb\x77\x04\x93\xad\x7f\x06\x00\x00\xff\xff\x44\x5c\xbf\xef\x2b\x21\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/index.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
